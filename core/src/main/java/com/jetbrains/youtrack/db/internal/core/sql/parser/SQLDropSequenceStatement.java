/* Generated By:JJTree: Do not edit this line. SQLAlterSequenceStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.exception.DatabaseException;
import com.jetbrains.youtrack.db.internal.common.log.LogManager;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.metadata.sequence.DBSequence;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.Map;
import java.util.Objects;

public class SQLDropSequenceStatement extends DDLStatement {

  SQLIdentifier name;

  boolean ifExists = false;

  public SQLDropSequenceStatement(int id) {
    super(id);
  }

  public SQLDropSequenceStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    final var database = ctx.getDatabase();
    DBSequence sequence =
        database.getMetadata().getSequenceLibrary().getSequence(this.name.getStringValue());
    if (sequence == null) {
      if (ifExists) {
        return ExecutionStream.empty();
      } else {
        throw new CommandExecutionException("Sequence not found: " + name);
      }
    }

    try {
      database.getMetadata().getSequenceLibrary().dropSequence(name.getStringValue());
    } catch (DatabaseException exc) {
      String message = "Unable to execute command: " + exc.getMessage();
      LogManager.instance().error(this, message, exc, (Object) null);
      throw new CommandExecutionException(message);
    }

    ResultInternal result = new ResultInternal(database);
    result.setProperty("operation", "drop sequence");
    result.setProperty("sequenceName", name.getStringValue());
    return ExecutionStream.singleton(result);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("DROP SEQUENCE ");
    name.toString(params, builder);
    if (ifExists) {
      builder.append(" IF EXISTS");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("DROP SEQUENCE ");
    name.toGenericStatement(builder);
    if (ifExists) {
      builder.append(" IF EXISTS");
    }
  }

  @Override
  public SQLDropSequenceStatement copy() {
    SQLDropSequenceStatement result = new SQLDropSequenceStatement(-1);
    result.name = name == null ? null : name.copy();
    result.ifExists = this.ifExists;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    SQLDropSequenceStatement that = (SQLDropSequenceStatement) o;

    if (this.ifExists != that.ifExists) {
      return false;
    }
    return Objects.equals(name, that.name);
  }

  @Override
  public int hashCode() {
    return name != null ? name.hashCode() : 0;
  }
}
/* JavaCC - OriginalChecksum=def62b1d04db5223307fe51873a9edd0 (do not edit this line) */

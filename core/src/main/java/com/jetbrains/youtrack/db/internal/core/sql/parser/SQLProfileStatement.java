/* Generated By:JJTree: Do not edit this line. SQLExplainStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.query.ExecutionPlan;
import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.internal.core.command.BasicCommandContext;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.InternalExecutionPlan;
import com.jetbrains.youtrack.db.internal.core.sql.executor.UpdateExecutionPlan;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class SQLProfileStatement extends SQLStatement {

  protected SQLStatement statement;

  public SQLProfileStatement(int id) {
    super(id);
  }

  public SQLProfileStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("PROFILE ");
    statement.toString(params, builder);
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("PROFILE ");
    statement.toGenericStatement(builder);
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal session, Object[] args, CommandContext parentCtx,
      boolean usePlanCache) {
    session.resetRecordLoadStats();
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabaseSession(session);
    Map<Object, Object> params = new HashMap<>();
    if (args != null) {
      for (var i = 0; i < args.length; i++) {
        params.put(i, args[i]);
      }
    }
    ctx.setInputParameters(params);

    ExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = statement.createExecutionPlan(ctx, true);
    } else {
      executionPlan = statement.createExecutionPlanNoCache(ctx, true);
    }

    if (executionPlan instanceof UpdateExecutionPlan) {
      ((UpdateExecutionPlan) executionPlan).executeInternal();
    }

    var rs = new LocalResultSet(session, (InternalExecutionPlan) executionPlan);

    while (rs.hasNext()) {
      rs.next();
    }
    var dbStats = session.getStats();
    var ep = rs.getExecutionPlan();
    if (ep == null) {
      throw new CommandExecutionException(session,
          "Cannot profile command: " + statement);
    }
    var result =
        new ExplainResultSet(session,
            ep,
            dbStats);
    rs.close();
    return result;
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal session, Map<Object, Object> args, CommandContext parentCtx,
      boolean usePlanCache) {
    session.resetRecordLoadStats();
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabaseSession(session);
    ctx.setInputParameters(args);

    ExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = statement.createExecutionPlan(ctx, true);
    } else {
      executionPlan = statement.createExecutionPlanNoCache(ctx, true);
    }

    var rs = new LocalResultSet(session, (InternalExecutionPlan) executionPlan);

    while (rs.hasNext()) {
      rs.next();
    }
    var dbStats = session.getStats();
    var ep = rs.getExecutionPlan();
    if (ep == null) {
      throw new CommandExecutionException(session,
          "Cannot profile command: " + statement);
    }
    var result =
        new ExplainResultSet(session,
            ep,
            dbStats);
    rs.close();
    return result;
  }

  @Override
  public InternalExecutionPlan createExecutionPlan(CommandContext ctx, boolean profile) {
    return statement.createExecutionPlan(ctx, true);
  }

  @Override
  public SQLProfileStatement copy() {
    var result = new SQLProfileStatement(-1);
    result.statement = statement == null ? null : statement.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLProfileStatement) o;

    return Objects.equals(statement, that.statement);
  }

  @Override
  public int hashCode() {
    return statement != null ? statement.hashCode() : 0;
  }

  @Override
  public boolean isIdempotent() {
    return true;
  }
}
/* JavaCC - OriginalChecksum=9fdd24510993cbee32e38a51c838bdb4 (do not edit this line) */

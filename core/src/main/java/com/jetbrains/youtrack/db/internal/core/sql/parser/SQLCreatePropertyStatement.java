/* Generated By:JJTree: Do not edit this line. SQLCreatePropertyStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.schema.PropertyType;
import com.jetbrains.youtrack.db.api.schema.SchemaClass;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaClassEmbedded;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaPropertyImpl;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLCreatePropertyStatement extends DDLStatement {

  public SQLIdentifier className;
  public SQLIdentifier propertyName;
  boolean ifNotExists = false;
  public SQLIdentifier propertyType;
  public SQLIdentifier linkedType;
  public boolean unsafe = false;
  public List<SQLCreatePropertyAttributeStatement> attributes =
      new ArrayList<SQLCreatePropertyAttributeStatement>();

  public SQLCreatePropertyStatement(int id) {
    super(id);
  }

  public SQLCreatePropertyStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void addAttribute(SQLCreatePropertyAttributeStatement attribute) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attribute);
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    ResultInternal result = new ResultInternal(ctx.getDatabase());
    result.setProperty("operation", "create property");
    result.setProperty("className", className.getStringValue());
    result.setProperty("propertyName", propertyName.getStringValue());
    executeInternal(ctx, result);
    return ExecutionStream.singleton(result);
  }

  private void executeInternal(CommandContext ctx, ResultInternal result) {
    var db = ctx.getDatabase();
    SchemaClassEmbedded clazz =
        (SchemaClassEmbedded) db.getMetadata().getSchema().getClass(className.getStringValue());
    if (clazz == null) {
      throw new CommandExecutionException("Class not found: " + className.getStringValue());
    }
    if (clazz.getProperty(propertyName.getStringValue()) != null) {
      if (ifNotExists) {
        return;
      }
      throw new CommandExecutionException(
          "Property "
              + className.getStringValue()
              + "."
              + propertyName.getStringValue()
              + " already exists");
    }
    PropertyType type = PropertyType.valueOf(
        propertyType.getStringValue().toUpperCase(Locale.ENGLISH));
    if (type == null) {
      throw new CommandExecutionException(
          "Invalid property type: " + propertyType.getStringValue());
    }
    SchemaClass linkedClass = null;
    PropertyType linkedType = null;
    if (this.linkedType != null) {
      String linked = this.linkedType.getStringValue();
      // FIRST SEARCH BETWEEN CLASSES
      linkedClass = db.getMetadata().getSchema().getClass(linked);
      if (linkedClass == null)
      // NOT FOUND: SEARCH BETWEEN TYPES
      {
        linkedType = PropertyType.valueOf(linked.toUpperCase(Locale.ENGLISH));
      }
    }
    // CREATE IT LOCALLY
    SchemaPropertyImpl internalProp =
        (SchemaPropertyImpl)
            clazz.addProperty(ctx.getDatabase(), propertyName.getStringValue(), type, linkedType,
                linkedClass,
                unsafe);
    for (SQLCreatePropertyAttributeStatement attr : attributes) {
      Object val = attr.setOnProperty(internalProp, ctx);
      result.setProperty(attr.settingName.getStringValue(), val);
    }
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE PROPERTY ");
    className.toString(params, builder);
    builder.append(".");
    propertyName.toString(params, builder);
    if (ifNotExists) {
      builder.append(" IF NOT EXISTS");
    }
    builder.append(" ");
    propertyType.toString(params, builder);
    if (linkedType != null) {
      builder.append(" ");
      linkedType.toString(params, builder);
    }

    if (!attributes.isEmpty()) {
      builder.append(" (");
      for (int i = 0; i < attributes.size(); i++) {
        SQLCreatePropertyAttributeStatement att = attributes.get(i);
        att.toString(params, builder);

        if (i < attributes.size() - 1) {
          builder.append(", ");
        }
      }
      builder.append(")");
    }

    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("CREATE PROPERTY ");
    className.toGenericStatement(builder);
    builder.append(".");
    propertyName.toGenericStatement(builder);
    if (ifNotExists) {
      builder.append(" IF NOT EXISTS");
    }
    builder.append(" ");
    propertyType.toGenericStatement(builder);
    if (linkedType != null) {
      builder.append(" ");
      linkedType.toGenericStatement(builder);
    }

    if (!attributes.isEmpty()) {
      builder.append(" (");
      for (int i = 0; i < attributes.size(); i++) {
        SQLCreatePropertyAttributeStatement att = attributes.get(i);
        att.toGenericStatement(builder);

        if (i < attributes.size() - 1) {
          builder.append(", ");
        }
      }
      builder.append(")");
    }

    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public SQLCreatePropertyStatement copy() {
    SQLCreatePropertyStatement result = new SQLCreatePropertyStatement(-1);
    result.className = className == null ? null : className.copy();
    result.propertyName = propertyName == null ? null : propertyName.copy();
    result.propertyType = propertyType == null ? null : propertyType.copy();
    result.linkedType = linkedType == null ? null : linkedType.copy();
    result.unsafe = unsafe;
    result.ifNotExists = ifNotExists;
    result.attributes =
        attributes == null
            ? null
            : attributes.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    SQLCreatePropertyStatement that = (SQLCreatePropertyStatement) o;

    if (unsafe != that.unsafe) {
      return false;
    }
    if (!Objects.equals(className, that.className)) {
      return false;
    }
    if (!Objects.equals(propertyName, that.propertyName)) {
      return false;
    }
    if (!Objects.equals(propertyType, that.propertyType)) {
      return false;
    }
    if (!Objects.equals(linkedType, that.linkedType)) {
      return false;
    }
    if (!Objects.equals(attributes, that.attributes)) {
      return false;
    }
    return ifNotExists == that.ifNotExists;
  }

  @Override
  public int hashCode() {
    int result = className != null ? className.hashCode() : 0;
    result = 31 * result + (propertyName != null ? propertyName.hashCode() : 0);
    result = 31 * result + (propertyType != null ? propertyType.hashCode() : 0);
    result = 31 * result + (linkedType != null ? linkedType.hashCode() : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    result = 31 * result + (attributes != null ? attributes.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=ff78676483d59013ab10b13bde2678d3 (do not edit this line) */

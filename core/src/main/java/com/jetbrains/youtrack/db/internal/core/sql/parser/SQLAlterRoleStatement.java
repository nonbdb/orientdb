/* Generated By:JJTree: Do not edit this line. SQLAlterRoleStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class SQLAlterRoleStatement extends SQLSimpleExecStatement {

  static class Op {

    protected static int TYPE_ADD = 0;
    protected static int TYPE_REMOVE = 1;

    Op(int type, SQLSecurityResourceSegment resource, SQLIdentifier policyName) {
      this.type = type;
      this.resource = resource;
      this.policyName = policyName;
    }

    protected final int type;
    protected final SQLSecurityResourceSegment resource;
    protected final SQLIdentifier policyName;
  }

  protected SQLIdentifier name;
  protected List<Op> operations = new ArrayList<>();

  public SQLAlterRoleStatement(int id) {
    super(id);
  }

  public SQLAlterRoleStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void addOperation(Op operation) {
    this.operations.add(operation);
  }

  @Override
  public ExecutionStream executeSimple(CommandContext ctx) {
    List<Result> rs = new ArrayList<>();
    var session = ctx.getDatabaseSession();
    var security = session.getSharedContext().getSecurity();
    var role = session.getMetadata().getSecurity().getRole(name.getStringValue());
    if (role == null) {
      throw new CommandExecutionException(session, "role not found: " + name.getStringValue());
    }
    for (var op : operations) {
      var result = new ResultInternal(session);
      result.setProperty("operation", "alter role");
      result.setProperty("name", name.getStringValue());
      result.setProperty("resource", op.resource.toString());
      if (op.type == Op.TYPE_ADD) {
        var policy = security.getSecurityPolicy(session, op.policyName.getStringValue());
        result.setProperty("operation", "ADD POLICY");
        result.setProperty("policyName", op.policyName.getStringValue());
        try {
          security.setSecurityPolicy(session, role, op.resource.toString(), policy);
          result.setProperty("result", "OK");
        } catch (Exception e) {
          result.setProperty("result", "failure");
        }
      } else {
        result.setProperty("operation", "REMOVE POLICY");
        try {
          security.removeSecurityPolicy(session, role, op.resource.toString());
          result.setProperty("result", "OK");
        } catch (Exception e) {
          result.setProperty("result", "failure");
        }
      }
      rs.add(result);
    }
    return ExecutionStream.resultIterator(rs.iterator());
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("ALTER ROLE ");
    name.toString(params, builder);

    for (var operation : operations) {
      if (operation.type == Op.TYPE_ADD) {
        builder.append(" SET POLICY ");
        operation.policyName.toString(params, builder);
        builder.append(" ON ");
        operation.resource.toString(params, builder);
      } else {
        builder.append(" REMOVE POLICY ON ");
        operation.resource.toString(params, builder);
      }
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("ALTER ROLE ");
    name.toGenericStatement(builder);

    for (var operation : operations) {
      if (operation.type == Op.TYPE_ADD) {
        builder.append(" SET POLICY ");
        operation.policyName.toGenericStatement(builder);
        builder.append(" ON ");
        operation.resource.toGenericStatement(builder);
      } else {
        builder.append(" REMOVE POLICY ON ");
        operation.resource.toGenericStatement(builder);
      }
    }
  }
}
/* JavaCC - OriginalChecksum=1a221cad0dfbc01f66a720300b776def (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLUpdateOperations.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLUpdateOperations extends SimpleNode {

  public static final int TYPE_SET = 0;
  public static final int TYPE_PUT = 1;
  public static final int TYPE_MERGE = 2;
  public static final int TYPE_CONTENT = 3;
  public static final int TYPE_INCREMENT = 4;
  public static final int TYPE_ADD = 5;
  public static final int TYPE_REMOVE = 6;

  protected int type;

  protected List<SQLUpdateItem> updateItems = new ArrayList<SQLUpdateItem>();

  protected List<SQLUpdatePutItem> updatePutItems = new ArrayList<SQLUpdatePutItem>();

  protected SQLJson json;

  protected List<SQLUpdateIncrementItem> updateIncrementItems = new ArrayList<SQLUpdateIncrementItem>();

  protected List<SQLUpdateRemoveItem> updateRemoveItems = new ArrayList<SQLUpdateRemoveItem>();

  public SQLUpdateOperations(int id) {
    super(id);
  }

  public SQLUpdateOperations(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    var first = true;
    switch (type) {
      case TYPE_SET:
        builder.append("SET ");
        for (var item : this.updateItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
        break;
      case TYPE_PUT:
        builder.append("PUT ");
        for (var item : this.updatePutItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
        break;
      case TYPE_MERGE:
        builder.append("MERGE ");
        json.toString(params, builder);
        break;
      case TYPE_CONTENT:
        builder.append("CONTENT ");
        json.toString(params, builder);
        break;
      case TYPE_INCREMENT:
        builder.append("INCREMENT ");
        for (var item : this.updateIncrementItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
        break;
      case TYPE_ADD:
        builder.append("ADD ");
        for (var item : this.updateIncrementItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
        break;
      case TYPE_REMOVE:
        builder.append("REMOVE ");
        for (var item : this.updateRemoveItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
        break;
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    var first = true;
    switch (type) {
      case TYPE_SET:
        builder.append("SET ");
        for (var item : this.updateItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
        break;
      case TYPE_PUT:
        builder.append("PUT ");
        for (var item : this.updatePutItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
        break;
      case TYPE_MERGE:
        builder.append("MERGE ");
        json.toGenericStatement(builder);
        break;
      case TYPE_CONTENT:
        builder.append("CONTENT ");
        json.toGenericStatement(builder);
        break;
      case TYPE_INCREMENT:
        builder.append("INCREMENT ");
        for (var item : this.updateIncrementItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
        break;
      case TYPE_ADD:
        builder.append("ADD ");
        for (var item : this.updateIncrementItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
        break;
      case TYPE_REMOVE:
        builder.append("REMOVE ");
        for (var item : this.updateRemoveItems) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
        break;
    }
  }

  public SQLUpdateOperations copy() {

    var result = new SQLUpdateOperations(-1);
    result.type = type;
    result.updateItems =
        updateItems == null
            ? null
            : updateItems.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.updatePutItems =
        updatePutItems == null
            ? null
            : updatePutItems.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.json = json == null ? null : json.copy();
    result.updateIncrementItems =
        updateIncrementItems == null
            ? null
            : updateIncrementItems.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.updateRemoveItems =
        updateRemoveItems == null
            ? null
            : updateRemoveItems.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLUpdateOperations) o;

    if (type != that.type) {
      return false;
    }
    if (!Objects.equals(updateItems, that.updateItems)) {
      return false;
    }
    if (!Objects.equals(updatePutItems, that.updatePutItems)) {
      return false;
    }
    if (!Objects.equals(json, that.json)) {
      return false;
    }
    if (!Objects.equals(updateIncrementItems, that.updateIncrementItems)) {
      return false;
    }
    return Objects.equals(updateRemoveItems, that.updateRemoveItems);
  }

  @Override
  public int hashCode() {
    var result = type;
    result = 31 * result + (updateItems != null ? updateItems.hashCode() : 0);
    result = 31 * result + (updatePutItems != null ? updatePutItems.hashCode() : 0);
    result = 31 * result + (json != null ? json.hashCode() : 0);
    result = 31 * result + (updateIncrementItems != null ? updateIncrementItems.hashCode() : 0);
    result = 31 * result + (updateRemoveItems != null ? updateRemoveItems.hashCode() : 0);
    return result;
  }

  public int getType() {
    return type;
  }

  public List<SQLUpdateItem> getUpdateItems() {
    return updateItems;
  }

  public void addUpdateItem(SQLUpdateItem item) {
    this.updateItems.add(item);
  }

  public List<SQLUpdatePutItem> getUpdatePutItems() {
    return updatePutItems;
  }

  public void addUpdatePutItem(SQLUpdatePutItem item) {
    this.updatePutItems.add(item);
  }

  public SQLJson getJson() {
    return json;
  }

  public List<SQLUpdateIncrementItem> getUpdateIncrementItems() {
    return updateIncrementItems;
  }

  public void addUpdateIncrementItem(SQLUpdateIncrementItem item) {
    this.updateIncrementItems.add(item);
  }

  public List<SQLUpdateRemoveItem> getUpdateRemoveItems() {
    return updateRemoveItems;
  }

  public void addUpdateRemoveItem(SQLUpdateRemoveItem item) {
    this.updateRemoveItems.add(item);
  }
}
/* JavaCC - OriginalChecksum=0eca3b3e4e3d96c42db57b7cd89cf755 (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLCommitStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

public class SQLCommitStatement extends SQLSimpleExecStatement {

  protected SQLInteger retry;
  protected List<SQLStatement> elseStatements;
  protected Boolean elseFail;

  public SQLCommitStatement(int id) {
    super(id);
  }

  public SQLCommitStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void addElse(SQLStatement statement) {
    if (elseStatements == null) {
      elseStatements = new ArrayList<>();
    }
    this.elseStatements.add(statement);
  }

  @Override
  public ExecutionStream executeSimple(CommandContext ctx) {
    var db = ctx.getDatabaseSession();
    db.commit(); // no RETRY and ELSE here, that case is allowed only for batch scripts;
    var item = new ResultInternal(db);
    item.setProperty("operation", "commit");
    return ExecutionStream.singleton(item);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("COMMIT");
    if (retry != null) {
      builder.append(" RETRY ");
      retry.toString(params, builder);
      if (elseFail != null || elseStatements != null) {
        builder.append(" ELSE ");
      }
      if (elseStatements != null) {
        builder.append("{\n");
        for (var stm : elseStatements) {
          stm.toString(params, builder);
          builder.append(";\n");
        }
        builder.append("}");
      }
      if (elseFail != null) {
        if (elseStatements != null) {
          builder.append(" AND");
        }
        if (elseFail) {
          builder.append(" FAIL");
        } else {
          builder.append(" CONTINUE");
        }
      }
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("COMMIT");
    if (retry != null) {
      builder.append(" RETRY ");
      retry.toGenericStatement(builder);
      if (elseFail != null || elseStatements != null) {
        builder.append(" ELSE ");
      }
      if (elseStatements != null) {
        builder.append("{\n");
        for (var stm : elseStatements) {
          stm.toGenericStatement(builder);
          builder.append(";\n");
        }
        builder.append("}");
      }
      if (elseFail != null) {
        if (elseStatements != null) {
          builder.append(" AND");
        }
        if (elseFail) {
          builder.append(" FAIL");
        } else {
          builder.append(" CONTINUE");
        }
      }
    }
  }

  @Override
  public SQLCommitStatement copy() {
    var result = new SQLCommitStatement(-1);
    result.retry = retry == null ? null : retry.copy();
    if (this.elseStatements != null) {
      result.elseStatements = new ArrayList<>();
      for (var stm : elseStatements) {
        result.elseStatements.add(stm.copy());
      }
    }
    if (elseFail != null) {
      result.elseFail = elseFail;
    }
    return result;
  }

  public SQLInteger getRetry() {
    return retry;
  }

  public List<SQLStatement> getElseStatements() {
    return elseStatements;
  }

  public Boolean getElseFail() {
    return elseFail;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLCommitStatement) o;

    if (!Objects.equals(retry, that.retry)) {
      return false;
    }
    if (!Objects.equals(elseStatements, that.elseStatements)) {
      return false;
    }
    return Objects.equals(elseFail, that.elseFail);
  }

  @Override
  public int hashCode() {
    var result = retry != null ? retry.hashCode() : 0;
    result = 31 * result + (elseStatements != null ? elseStatements.hashCode() : 0);
    result = 31 * result + (elseFail != null ? elseFail.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=eaa0bc8f765fdaa017789953861bc0aa (do not edit this line) */

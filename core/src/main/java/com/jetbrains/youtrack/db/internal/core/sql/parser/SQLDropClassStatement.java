/* Generated By:JJTree: Do not edit this line. SQLDropClassStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.Map;
import java.util.Objects;

public class SQLDropClassStatement extends DDLStatement {

  public SQLIdentifier name;
  public SQLInputParameter nameParam;
  public boolean ifExists = false;
  public boolean unsafe = false;

  public SQLDropClassStatement(int id) {
    super(id);
  }

  public SQLDropClassStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    var session = ctx.getDatabaseSession();
    var schema = session.getMetadata().getSchemaInternal();
    String className;
    if (name != null) {
      className = name.getStringValue();
    } else {
      className = String.valueOf(nameParam.getValue(ctx.getInputParameters()));
    }
    var clazz = schema.getClassInternal(className);
    if (clazz == null) {
      if (ifExists) {
        return ExecutionStream.empty();
      }
      throw new CommandExecutionException(session, "Class " + className + " does not exist");
    }

    if (!unsafe && clazz.count(session) > 0) {
      // check vertex or edge
      if (clazz.isVertexType(session)) {
        throw new CommandExecutionException(session,
            "'DROP CLASS' command cannot drop class '"
                + className
                + "' because it contains Vertices. Use 'DELETE VERTEX' command first to avoid"
                + " broken edges in a database, or apply the 'UNSAFE' keyword to force it");
      } else if (clazz.isEdgeType(session)) {
        // FOUND EDGE CLASS
        throw new CommandExecutionException(session,
            "'DROP CLASS' command cannot drop class '"
                + className
                + "' because it contains Edges. Use 'DELETE EDGE' command first to avoid broken"
                + " vertices in a database, or apply the 'UNSAFE' keyword to force it");
      }
    }

    schema.dropClass(className);

    var result = new ResultInternal(session);
    result.setProperty("operation", "drop class");
    result.setProperty("className", className);
    return ExecutionStream.singleton(result);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("DROP CLASS ");
    if (name != null) {
      name.toString(params, builder);
    } else {
      nameParam.toString(params, builder);
    }
    if (ifExists) {
      builder.append(" IF EXISTS");
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("DROP CLASS ");
    if (name != null) {
      name.toGenericStatement(builder);
    } else {
      nameParam.toGenericStatement(builder);
    }
    if (ifExists) {
      builder.append(" IF EXISTS");
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public SQLDropClassStatement copy() {
    var result = new SQLDropClassStatement(-1);
    result.name = name == null ? null : name.copy();
    result.nameParam = nameParam == null ? null : nameParam.copy();
    result.ifExists = ifExists;
    result.unsafe = unsafe;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    var that = (SQLDropClassStatement) o;
    return ifExists == that.ifExists
        && unsafe == that.unsafe
        && Objects.equals(name, that.name)
        && Objects.equals(nameParam, that.nameParam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, nameParam, ifExists, unsafe);
  }
}
/* JavaCC - OriginalChecksum=8c475e1225074f68be37fce610987d54 (do not edit this line) */

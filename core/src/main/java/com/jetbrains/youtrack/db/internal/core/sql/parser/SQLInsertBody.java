/* Generated By:JJTree: Do not edit this line. SQLInsertBody.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLInsertBody extends SimpleNode {

  private List<SQLIdentifier> identifierList;
  private List<List<SQLExpression>> valueExpressions;
  private List<SQLInsertSetExpression> setExpressions;

  private List<SQLJson> content;
  private List<SQLInputParameter> contentInputParam;

  public SQLInsertBody(int id) {
    super(id);
  }

  public SQLInsertBody(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {

    if (identifierList != null) {
      builder.append("(");
      var first = true;
      for (var item : identifierList) {
        if (!first) {
          builder.append(", ");
        }
        item.toString(params, builder);
        first = false;
      }
      builder.append(") VALUES ");
      if (valueExpressions != null) {
        var firstList = true;
        for (var itemList : valueExpressions) {
          if (firstList) {
            builder.append("(");
          } else {
            builder.append("),(");
          }
          first = true;
          for (var item : itemList) {
            if (!first) {
              builder.append(", ");
            }
            item.toString(params, builder);
            first = false;
          }
          firstList = false;
        }
      }
      builder.append(")");
    }

    if (setExpressions != null) {
      builder.append("SET ");
      var first = true;
      for (var item : setExpressions) {
        if (!first) {
          builder.append(", ");
        }
        item.toString(params, builder);
        first = false;
      }
    }

    if (content != null || contentInputParam != null) {
      builder.append("CONTENT ");
      var first = true;
      if (content != null) {
        for (var item : content) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
      } else if (contentInputParam != null) {
        for (var item : contentInputParam) {
          if (!first) {
            builder.append(", ");
          }
          item.toString(params, builder);
          first = false;
        }
      }
    }
  }

  public void toGenericStatement(StringBuilder builder) {

    if (identifierList != null) {
      builder.append("(");
      var first = true;
      for (var item : identifierList) {
        if (!first) {
          builder.append(", ");
        }
        item.toGenericStatement(builder);
        first = false;
      }
      builder.append(") VALUES ");
      if (valueExpressions != null) {
        var firstList = true;
        for (var itemList : valueExpressions) {
          if (firstList) {
            builder.append("(");
          } else {
            builder.append("),(");
          }
          first = true;
          for (var item : itemList) {
            if (!first) {
              builder.append(", ");
            }
            item.toGenericStatement(builder);
            first = false;
          }
          firstList = false;
        }
      }
      builder.append(")");
    }

    if (setExpressions != null) {
      builder.append("SET ");
      var first = true;
      for (var item : setExpressions) {
        if (!first) {
          builder.append(", ");
        }
        item.toGenericStatement(builder);
        first = false;
      }
    }

    if (content != null || contentInputParam != null) {
      builder.append("CONTENT ");
      var first = true;
      if (content != null) {
        for (var item : content) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
      } else if (contentInputParam != null) {
        for (var item : contentInputParam) {
          if (!first) {
            builder.append(", ");
          }
          item.toGenericStatement(builder);
          first = false;
        }
      }
    }
  }

  public SQLInsertBody copy() {
    var result = new SQLInsertBody(-1);
    result.identifierList =
        identifierList == null
            ? null
            : identifierList.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.valueExpressions =
        valueExpressions == null
            ? null
            : valueExpressions.stream()
                .map(sub -> sub.stream().map(x -> x.copy()).collect(Collectors.toList()))
                .collect(Collectors.toList());
    result.setExpressions =
        setExpressions == null
            ? null
            : setExpressions.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.content =
        content == null ? null : content.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.contentInputParam =
        contentInputParam == null
            ? null
            : contentInputParam.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLInsertBody) o;

    if (!Objects.equals(identifierList, that.identifierList)) {
      return false;
    }
    if (!Objects.equals(valueExpressions, that.valueExpressions)) {
      return false;
    }
    if (!Objects.equals(setExpressions, that.setExpressions)) {
      return false;
    }
    if (!Objects.equals(content, that.content)) {
      return false;
    }
    return Objects.equals(contentInputParam, that.contentInputParam);
  }

  @Override
  public int hashCode() {
    var result = identifierList != null ? identifierList.hashCode() : 0;
    result = 31 * result + (valueExpressions != null ? valueExpressions.hashCode() : 0);
    result = 31 * result + (setExpressions != null ? setExpressions.hashCode() : 0);
    result = 31 * result + (content != null ? content.hashCode() : 0);
    result = 31 * result + (contentInputParam != null ? contentInputParam.hashCode() : 0);
    return result;
  }

  public List<SQLIdentifier> getIdentifierList() {
    return identifierList;
  }

  public void addIdentifier(SQLIdentifier identifier) {
    if (this.identifierList == null) {
      this.identifierList = new ArrayList<>();
    }
    this.identifierList.add(identifier);
  }

  public List<List<SQLExpression>> getValueExpressions() {
    return valueExpressions;
  }

  public void addValueExpression(List<SQLExpression> exp) {
    if (this.valueExpressions == null) {
      this.valueExpressions = new ArrayList<>();
    }
    this.valueExpressions.add(exp);
  }

  public List<SQLInsertSetExpression> getSetExpressions() {
    return setExpressions;
  }

  public void addInsertSetExpression(SQLInsertSetExpression exp) {
    if (this.setExpressions == null) {
      this.setExpressions = new ArrayList<>();
    }
    this.setExpressions.add(exp);
  }

  public List<SQLJson> getContent() {
    return content;
  }

  public List<SQLInputParameter> getContentInputParam() {
    return contentInputParam;
  }

  public void addContentInputParam(SQLInputParameter par) {
    if (contentInputParam == null) {
      contentInputParam = new ArrayList<>();
    }
    contentInputParam.add(par);
  }

  public void addContent(SQLJson json) {
    if (content == null) {
      content = new ArrayList<>();
    }
    content.add(json);
  }

  public boolean isCacheable(DatabaseSessionInternal session) {

    if (this.valueExpressions != null) {
      for (var valueExpression : valueExpressions) {
        for (var oExpression : valueExpression) {
          if (!oExpression.isCacheable(session)) {
            return false;
          }
        }
      }
    }
    if (setExpressions != null) {
      for (var setExpression : setExpressions) {
        if (!setExpression.isCacheable(session)) {
          return false;
        }
      }
    }

    if (content != null) {
      for (var item : content) {
        if (!item.isCacheable()) {
          return false;
        }
      }
    }

    return true;
  }
}
/* JavaCC - OriginalChecksum=7d2079a41a1fc63a812cb679e729b23a (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLTruncateClusterStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionAbstract;
import com.jetbrains.youtrack.db.api.exception.DatabaseException;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.Map;
import java.util.Objects;

public class SQLTruncateClusterStatement extends DDLStatement {

  public SQLIdentifier clusterName;
  public SQLInteger clusterNumber;
  public boolean unsafe = false;

  public SQLTruncateClusterStatement(int id) {
    super(id);
  }

  public SQLTruncateClusterStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    var database = (DatabaseSessionAbstract) ctx.getDatabase();

    Integer clusterId = null;
    if (clusterNumber != null) {
      clusterId = clusterNumber.getValue().intValue();
    } else {
      clusterId = database.getClusterIdByName(clusterName.getStringValue());
    }

    if (clusterId < 0) {
      throw new DatabaseException("Cluster with name " + clusterName + " does not exist");
    }

    var name = database.getClusterNameById(clusterId);
    var count = database.truncateClusterInternal(name);

    var result = new ResultInternal(database);
    result.setProperty("operation", "truncate cluster");
    result.setProperty("clusterName", name);
    result.setProperty("clusterId", clusterId);
    result.setProperty("count", count);

    return ExecutionStream.singleton(result);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("TRUNCATE CLUSTER ");
    if (clusterName != null) {
      clusterName.toString(params, builder);
    } else if (clusterNumber != null) {
      clusterNumber.toString(params, builder);
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("TRUNCATE CLUSTER ");
    if (clusterName != null) {
      clusterName.toGenericStatement(builder);
    } else if (clusterNumber != null) {
      clusterNumber.toGenericStatement(builder);
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public SQLTruncateClusterStatement copy() {
    var result = new SQLTruncateClusterStatement(-1);
    result.clusterName = clusterName == null ? null : clusterName.copy();
    result.clusterNumber = clusterNumber == null ? null : clusterNumber.copy();
    result.unsafe = unsafe;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLTruncateClusterStatement) o;

    if (unsafe != that.unsafe) {
      return false;
    }
    if (!Objects.equals(clusterName, that.clusterName)) {
      return false;
    }
    return Objects.equals(clusterNumber, that.clusterNumber);
  }

  @Override
  public int hashCode() {
    var result = clusterName != null ? clusterName.hashCode() : 0;
    result = 31 * result + (clusterNumber != null ? clusterNumber.hashCode() : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=301f993f6ba2893cb30c8f189674b974 (do not edit this line) */

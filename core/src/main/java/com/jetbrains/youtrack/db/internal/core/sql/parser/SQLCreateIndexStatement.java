/* Generated By:JJTree: Do not edit this line. SQLCreateIndexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.exception.DatabaseException;
import com.jetbrains.youtrack.db.api.schema.Collate;
import com.jetbrains.youtrack.db.api.schema.PropertyType;
import com.jetbrains.youtrack.db.api.schema.SchemaClass;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.index.Index;
import com.jetbrains.youtrack.db.internal.core.index.IndexDefinition;
import com.jetbrains.youtrack.db.internal.core.index.IndexDefinitionFactory;
import com.jetbrains.youtrack.db.internal.core.index.IndexException;
import com.jetbrains.youtrack.db.internal.core.index.IndexFactory;
import com.jetbrains.youtrack.db.internal.core.index.Indexes;
import com.jetbrains.youtrack.db.internal.core.index.SimpleKeyIndexDefinition;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaClassImpl;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.sql.SQLEngine;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLCreateIndexStatement extends DDLStatement {

  protected SQLIndexName name;
  protected SQLIdentifier className;
  protected List<Property> propertyList = new ArrayList<Property>();
  protected SQLIdentifier type;
  protected SQLIdentifier engine;
  protected List<SQLIdentifier> keyTypes = new ArrayList<SQLIdentifier>();
  protected SQLJson metadata;
  protected boolean ifNotExists = false;

  public SQLCreateIndexStatement(int id) {
    super(id);
  }

  public SQLCreateIndexStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void addProperty(Property property) {
    this.propertyList.add(property);
  }

  public void addKeyType(SQLIdentifier identifier) {
    this.keyTypes.add(identifier);
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    var execResult = execute(ctx);
    if (execResult != null) {
      var result = new ResultInternal(ctx.getDatabase());
      result.setProperty("operation", "create index");
      result.setProperty("name", name.getValue());
      return ExecutionStream.singleton(result);
    } else {
      return ExecutionStream.empty();
    }
  }

  Object execute(CommandContext ctx) {
    final var database = ctx.getDatabase();

    if (database.getMetadata().getIndexManagerInternal().existsIndex(name.getValue())) {
      if (ifNotExists) {
        return null;
      } else {
        throw new CommandExecutionException("Index " + name + " already exists");
      }
    }

    final Index idx;
    var collatesList = calculateCollates(ctx);
    var engine =
        this.engine == null ? null : this.engine.getStringValue().toUpperCase(Locale.ENGLISH);
    var metadataDoc = calculateMetadata(ctx);

    if (propertyList == null || propertyList.size() == 0) {
      var factory = Indexes.getFactory(type.getStringValue(), engine);

      var keyTypes = calculateKeyTypes(ctx);

      if (keyTypes != null && keyTypes.length > 0) {
        idx =
            database
                .getMetadata()
                .getIndexManagerInternal()
                .createIndex(
                    database,
                    name.getValue(),
                    type.getStringValue(),
                    new SimpleKeyIndexDefinition(keyTypes, collatesList),
                    null,
                    null,
                    metadataDoc != null ? metadataDoc.toMap() : null,
                    engine);
      } else if (keyTypes != null
          && keyTypes.length == 0
          && "LUCENE_CROSS_CLASS".equalsIgnoreCase(engine)) {
        // handle special case of cross class  Lucene index: awful but works
        IndexDefinition keyDef =
            new SimpleKeyIndexDefinition(new PropertyType[]{PropertyType.STRING}, collatesList);
        idx =
            database
                .getMetadata()
                .getIndexManagerInternal()
                .createIndex(
                    database,
                    name.getValue(),
                    type.getStringValue(),
                    keyDef,
                    null,
                    null,
                    metadataDoc.toMap(),
                    engine);

      } else if (className == null && keyTypes == null || keyTypes.length == 0) {
        // legacy: create index without specifying property names
        var split = name.getValue().split("\\.");
        if (split.length != 2) {
          throw new DatabaseException(
              "Impossible to create an index without specify class and property name nor key types:"
                  + " "
                  + this);
        }
        var oClass = database.getClass(split[0]);
        if (oClass == null) {
          throw new DatabaseException(
              "Impossible to create an index, class not found: " + split[0]);
        }
        if (oClass.getProperty(split[1]) == null) {
          throw new DatabaseException(
              "Impossible to create an index, property not found: " + name.getValue());
        }
        var fields = new String[]{split[1]};
        idx = getoIndex(oClass, fields, engine, database, collatesList, metadataDoc);

      } else {
        throw new DatabaseException(
            "Impossible to create an index without specify the key type or the associated property:"
                + " "
                + this);
      }
    } else {
      var fields = calculateProperties(ctx);
      var oClass = getIndexClass(ctx);
      idx = getoIndex(oClass, fields, engine, database, collatesList, metadataDoc);
    }

    if (idx != null) {
      return database.computeInTx(() -> idx.getInternal().size(database));
    }

    return null;
  }

  private Index getoIndex(
      SchemaClass oClass,
      String[] fields,
      String engine,
      DatabaseSessionInternal database,
      List<Collate> collatesList,
      EntityImpl metadataDoc) {
    Index idx;
    if ((keyTypes == null || keyTypes.size() == 0) && collatesList == null) {
      var indexName = name.getValue();
      oClass.createIndex(database,
          indexName, type.getStringValue(), null, metadataDoc != null ? metadataDoc.toMap() : null,
          engine, fields);
      idx = database.getIndex(indexName);
    } else {
      final List<PropertyType> fieldTypeList;
      if (keyTypes == null || keyTypes.size() == 0 && fields.length > 0) {
        for (final var fieldName : fields) {
          if (!fieldName.equals("@rid") && !oClass.existsProperty(fieldName)) {
            throw new IndexException(
                "Index with name : '"
                    + name.getValue()
                    + "' cannot be created on class : '"
                    + oClass.getName()
                    + "' because field: '"
                    + fieldName
                    + "' is absent in class definition.");
          }
        }
        fieldTypeList = ((SchemaClassImpl) oClass).extractFieldTypes(fields);
      } else {
        fieldTypeList =
            keyTypes.stream()
                .map(x -> PropertyType.valueOf(x.getStringValue()))
                .collect(Collectors.toList());
      }

      final var idxDef =
          IndexDefinitionFactory.createIndexDefinition(
              oClass,
              Arrays.asList(fields),
              fieldTypeList,
              collatesList,
              type.getStringValue(),
              engine);

      idx =
          database
              .getMetadata()
              .getIndexManagerInternal()
              .createIndex(
                  database,
                  name.getValue(),
                  type.getStringValue(),
                  idxDef,
                  oClass.getPolymorphicClusterIds(),
                  null,
                  metadataDoc != null ? metadataDoc.toMap() : null,
                  engine);
    }
    return idx;
  }

  /**
   * * returns the list of property names to be indexed
   *
   * @param ctx
   * @return
   */
  private String[] calculateProperties(CommandContext ctx) {
    if (propertyList == null) {
      return null;
    }
    return propertyList.stream()
        .map(x -> x.getCompleteKey())
        .collect(Collectors.toList())
        .toArray(new String[]{});
  }

  /**
   * calculates the indexed class based on the class name
   */
  private SchemaClass getIndexClass(CommandContext ctx) {
    if (className == null) {
      return null;
    }
    var result =
        ctx.getDatabase().getMetadata().getSchema().getClass(className.getStringValue());
    if (result == null) {
      throw new CommandExecutionException("Cannot find class " + className);
    }
    return result;
  }

  /**
   * returns index metadata as an ODocuemnt (as expected by Index API)
   */
  private EntityImpl calculateMetadata(CommandContext ctx) {
    if (metadata == null) {
      return null;
    }
    return metadata.toEntity(null, ctx);
  }

  private PropertyType[] calculateKeyTypes(CommandContext ctx) {
    if (keyTypes == null) {
      return new PropertyType[0];
    }
    return keyTypes.stream()
        .map(x -> PropertyType.valueOf(x.getStringValue()))
        .collect(Collectors.toList())
        .toArray(new PropertyType[]{});
  }

  private List<Collate> calculateCollates(CommandContext ctx) {
    List<Collate> result = new ArrayList<>();
    var found = false;
    for (var prop : this.propertyList) {
      var collate = prop.collate == null ? null : prop.collate.getStringValue();
      if (collate != null) {
        final var col = SQLEngine.getCollate(collate);
        result.add(col);
        found = true;
      } else {
        result.add(null);
      }
    }
    if (!found) {
      return null;
    }
    return result;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE INDEX ");
    name.toString(params, builder);
    if (className != null) {
      builder.append(" ON ");
      className.toString(params, builder);
      builder.append(" (");
      var first = true;
      for (var prop : propertyList) {
        if (!first) {
          builder.append(", ");
        }
        if (prop.name != null) {
          prop.name.toString(params, builder);
        } else {
          prop.recordAttribute.toString(params, builder);
        }
        if (prop.byKey) {
          builder.append(" BY KEY");
        } else if (prop.byValue) {
          builder.append(" BY VALUE");
        }
        if (prop.collate != null) {
          builder.append(" COLLATE ");
          prop.collate.toString(params, builder);
        }
        first = false;
      }
      builder.append(")");
    }
    builder.append(" ");
    type.toString(params, builder);
    if (engine != null) {
      builder.append(" ENGINE ");
      engine.toString(params, builder);
    }
    if (keyTypes != null && keyTypes.size() > 0) {
      var first = true;
      builder.append(" ");
      for (var keyType : keyTypes) {
        if (!first) {
          builder.append(",");
        }
        keyType.toString(params, builder);
        first = false;
      }
    }
    if (metadata != null) {
      builder.append(" METADATA ");
      metadata.toString(params, builder);
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("CREATE INDEX ");
    name.toGenericStatement(builder);
    if (className != null) {
      builder.append(" ON ");
      className.toGenericStatement(builder);
      builder.append(" (");
      var first = true;
      for (var prop : propertyList) {
        if (!first) {
          builder.append(", ");
        }
        if (prop.name != null) {
          prop.name.toGenericStatement(builder);
        } else {
          prop.recordAttribute.toGenericStatement(builder);
        }
        if (prop.byKey) {
          builder.append(" BY KEY");
        } else if (prop.byValue) {
          builder.append(" BY VALUE");
        }
        if (prop.collate != null) {
          builder.append(" COLLATE ");
          prop.collate.toGenericStatement(builder);
        }
        first = false;
      }
      builder.append(")");
    }
    builder.append(" ");
    type.toGenericStatement(builder);
    if (engine != null) {
      builder.append(" ENGINE ");
      engine.toGenericStatement(builder);
    }
    if (keyTypes != null && keyTypes.size() > 0) {
      var first = true;
      builder.append(" ");
      for (var keyType : keyTypes) {
        if (!first) {
          builder.append(",");
        }
        keyType.toGenericStatement(builder);
        first = false;
      }
    }
    if (metadata != null) {
      builder.append(" METADATA ");
      metadata.toGenericStatement(builder);
    }
  }

  @Override
  public SQLCreateIndexStatement copy() {
    var result = new SQLCreateIndexStatement(-1);
    result.name = name == null ? null : name.copy();
    result.className = className == null ? null : className.copy();
    result.propertyList =
        propertyList == null
            ? null
            : propertyList.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.type = type == null ? null : type.copy();
    result.engine = engine == null ? null : engine.copy();
    result.keyTypes =
        keyTypes == null ? null : keyTypes.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.metadata = metadata == null ? null : metadata.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLCreateIndexStatement) o;

    if (!Objects.equals(name, that.name)) {
      return false;
    }
    if (!Objects.equals(className, that.className)) {
      return false;
    }
    if (!Objects.equals(propertyList, that.propertyList)) {
      return false;
    }
    if (!Objects.equals(type, that.type)) {
      return false;
    }
    if (!Objects.equals(engine, that.engine)) {
      return false;
    }
    if (!Objects.equals(keyTypes, that.keyTypes)) {
      return false;
    }
    return Objects.equals(metadata, that.metadata);
  }

  @Override
  public int hashCode() {
    var result = name != null ? name.hashCode() : 0;
    result = 31 * result + (className != null ? className.hashCode() : 0);
    result = 31 * result + (propertyList != null ? propertyList.hashCode() : 0);
    result = 31 * result + (type != null ? type.hashCode() : 0);
    result = 31 * result + (engine != null ? engine.hashCode() : 0);
    result = 31 * result + (keyTypes != null ? keyTypes.hashCode() : 0);
    result = 31 * result + (metadata != null ? metadata.hashCode() : 0);
    return result;
  }

  public static class Property {

    protected SQLIdentifier name;
    protected SQLRecordAttribute recordAttribute;
    protected boolean byKey = false;
    protected boolean byValue = false;
    protected SQLIdentifier collate;

    public Property copy() {
      var result = new Property();
      result.name = name == null ? null : name.copy();
      result.recordAttribute = recordAttribute == null ? null : recordAttribute.copy();
      result.byKey = byKey;
      result.byValue = byValue;
      result.collate = collate == null ? null : collate.copy();
      return result;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }

      var property = (Property) o;

      if (byKey != property.byKey) {
        return false;
      }
      if (byValue != property.byValue) {
        return false;
      }
      if (!Objects.equals(name, property.name)) {
        return false;
      }
      if (!Objects.equals(recordAttribute, property.recordAttribute)) {
        return false;
      }
      return Objects.equals(collate, property.collate);
    }

    @Override
    public int hashCode() {
      var result = name != null ? name.hashCode() : 0;
      result = 31 * result + (recordAttribute != null ? recordAttribute.hashCode() : 0);
      result = 31 * result + (byKey ? 1 : 0);
      result = 31 * result + (byValue ? 1 : 0);
      result = 31 * result + (collate != null ? collate.hashCode() : 0);
      return result;
    }

    /**
     * returns the complete key to index, eg. property name or "property by key/value"
     */
    public String getCompleteKey() {
      var result = new StringBuilder();
      if (name != null) {
        result.append(name.getStringValue());
      } else if (recordAttribute != null) {
        result.append(recordAttribute.getName());
      }

      if (byKey) {
        result.append(" by key");
      }
      if (byValue) {
        result.append(" by value");
      }
      return result.toString();
    }
  }
}
/* JavaCC - OriginalChecksum=bd090e02c4346ad390a6b8c77f1b9dba (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLReturnStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

public class SQLReturnStatement extends SQLSimpleExecStatement {

  protected SQLExpression expression;

  public SQLReturnStatement(int id) {
    super(id);
  }

  public SQLReturnStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeSimple(CommandContext ctx) {
    List<Result> rs = new ArrayList<>();

    var database = ctx.getDatabaseSession();
    var result = expression == null ? null : expression.execute((Result) null, ctx);
    if (result instanceof Result) {
      rs.add((Result) result);
    } else if (result instanceof Identifiable) {
      var res = new ResultInternal(database, (Identifiable) result);
      rs.add(res);
    } else if (result instanceof ResultSet) {
      if (!((ResultSet) result).hasNext()) {
        try {
          ((ResultSet) result).reset();
        } catch (UnsupportedOperationException ignore) {
          // just try to reset the RS, in case it was already used during the script execution
          // already
          // You can have two cases here:
          // - a result stored in a LET, that is always resettable, as it's copied
          // - a result from a direct query (eg. RETURN SELECT...), that is new or just empty, so
          // this operation does not hurt
        }
      }
      return ExecutionStream.resultIterator(((ResultSet) result).stream().iterator());
    } else if (result instanceof ExecutionStream) {
      return (ExecutionStream) result;
    } else {
      var res = new ResultInternal(database);
      res.setProperty("value", result);
      rs.add(res);
    }
    return ExecutionStream.resultIterator(rs.iterator());
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("RETURN");
    if (expression != null) {
      builder.append(" ");
      expression.toString(params, builder);
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("RETURN");
    if (expression != null) {
      builder.append(" ");
      expression.toGenericStatement(builder);
    }
  }

  @Override
  public SQLReturnStatement copy() {
    var result = new SQLReturnStatement(-1);
    result.expression = expression == null ? null : expression.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLReturnStatement) o;

    return Objects.equals(expression, that.expression);
  }

  @Override
  public int hashCode() {
    return expression != null ? expression.hashCode() : 0;
  }
}
/* JavaCC - OriginalChecksum=c72ec860d1fa92cbf52e42ae1c2935c0 (do not edit this line) */

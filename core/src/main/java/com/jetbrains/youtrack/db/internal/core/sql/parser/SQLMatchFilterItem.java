/* Generated By:JJTree: Do not edit this line. SQLMatchFilterItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import java.util.Map;
import java.util.Objects;

public class SQLMatchFilterItem extends SimpleNode {

  protected SQLExpression className;
  protected SQLExpression classNames;
  protected SQLIdentifier clusterName;
  protected SQLInteger clusterId;
  protected SQLRid rid;
  protected SQLIdentifier alias;
  protected SQLWhereClause filter;
  protected SQLWhereClause whileCondition;
  protected SQLArrayRangeSelector depth;
  protected SQLInteger maxDepth;
  protected Boolean optional;
  protected SQLIdentifier depthAlias;
  protected SQLIdentifier pathAlias;

  public SQLMatchFilterItem(int id) {
    super(id);
  }

  public SQLMatchFilterItem(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (className != null) {
      builder.append("class: ");
      className.toString(params, builder);
      return;
    }
    if (classNames != null) {
      builder.append("classes: ");
      classNames.toString(params, builder);
      return;
    }
    if (clusterName != null) {
      builder.append("cluster: ");
      clusterName.toString(params, builder);
      return;
    }
    if (clusterId != null) {
      builder.append("cluster: ");
      clusterId.toString(params, builder);
      return;
    }
    if (rid != null) {
      builder.append("rid: ");
      rid.toString(params, builder);
      return;
    }

    if (alias != null) {
      builder.append("as: ");
      alias.toString(params, builder);
      return;
    }

    if (maxDepth != null) {
      builder.append("maxdepth: ");
      maxDepth.toString(params, builder);
      return;
    }

    if (filter != null) {
      builder.append("where: (");
      filter.toString(params, builder);
      builder.append(")");
      return;
    }

    if (whileCondition != null) {
      builder.append("while: (");
      whileCondition.toString(params, builder);
      builder.append(")");
      return;
    }

    if (optional != null) {
      builder.append("optional: ");
      builder.append(optional);
      return;
    }

    if (depthAlias != null) {
      builder.append("depthAlias: ");
      depthAlias.toString(params, builder);
      return;
    }

    if (pathAlias != null) {
      builder.append("pathAlias: ");
      pathAlias.toString(params, builder);
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    if (className != null) {
      builder.append("class: ");
      className.toGenericStatement(builder);
      return;
    }
    if (classNames != null) {
      builder.append("classes: ");
      classNames.toGenericStatement(builder);
      return;
    }
    if (clusterName != null) {
      builder.append("cluster: ");
      clusterName.toGenericStatement(builder);
      return;
    }
    if (clusterId != null) {
      builder.append("cluster: ");
      clusterId.toGenericStatement(builder);
      return;
    }
    if (rid != null) {
      builder.append("rid: ");
      rid.toGenericStatement(builder);
      return;
    }

    if (alias != null) {
      builder.append("as: ");
      alias.toGenericStatement(builder);
      return;
    }

    if (maxDepth != null) {
      builder.append("maxdepth: ");
      maxDepth.toGenericStatement(builder);
      return;
    }

    if (filter != null) {
      builder.append("where: (");
      filter.toGenericStatement(builder);
      builder.append(")");
      return;
    }

    if (whileCondition != null) {
      builder.append("while: (");
      whileCondition.toGenericStatement(builder);
      builder.append(")");
      return;
    }

    if (optional != null) {
      builder.append("optional: ");
      builder.append(PARAMETER_PLACEHOLDER);
      return;
    }

    if (depthAlias != null) {
      builder.append("depthAlias: ");
      depthAlias.toGenericStatement(builder);
      return;
    }

    if (pathAlias != null) {
      builder.append("pathAlias: ");
      pathAlias.toGenericStatement(builder);
    }
  }

  @Override
  public SQLMatchFilterItem copy() {
    var result = new SQLMatchFilterItem(-1);
    result.className = className == null ? null : className.copy();
    result.classNames = classNames == null ? null : classNames.copy();
    result.clusterName = clusterName == null ? null : clusterName.copy();
    result.clusterId = clusterId == null ? null : clusterId.copy();
    result.rid = rid == null ? null : rid.copy();
    result.alias = alias == null ? null : alias.copy();
    result.filter = filter == null ? null : filter.copy();
    result.whileCondition = whileCondition == null ? null : whileCondition.copy();
    result.depth = depth == null ? null : depth.copy();
    result.maxDepth = maxDepth == null ? null : maxDepth.copy();
    result.optional = optional;
    result.depthAlias = depthAlias == null ? null : depthAlias.copy();
    result.pathAlias = pathAlias == null ? null : pathAlias.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLMatchFilterItem) o;

    if (!Objects.equals(className, that.className)) {
      return false;
    }
    if (!Objects.equals(classNames, that.classNames)) {
      return false;
    }
    if (!Objects.equals(clusterName, that.clusterName)) {
      return false;
    }
    if (!Objects.equals(clusterId, that.clusterId)) {
      return false;
    }
    if (!Objects.equals(rid, that.rid)) {
      return false;
    }
    if (!Objects.equals(alias, that.alias)) {
      return false;
    }
    if (!Objects.equals(filter, that.filter)) {
      return false;
    }
    if (!Objects.equals(whileCondition, that.whileCondition)) {
      return false;
    }
    if (!Objects.equals(depth, that.depth)) {
      return false;
    }
    if (!Objects.equals(maxDepth, that.maxDepth)) {
      return false;
    }
    if (!Objects.equals(optional, that.optional)) {
      return false;
    }
    if (!Objects.equals(depthAlias, that.depthAlias)) {
      return false;
    }
    return Objects.equals(pathAlias, that.pathAlias);
  }

  @Override
  public int hashCode() {
    var result = className != null ? className.hashCode() : 0;
    result = 31 * result + (classNames != null ? classNames.hashCode() : 0);
    result = 31 * result + (clusterName != null ? clusterName.hashCode() : 0);
    result = 31 * result + (clusterId != null ? clusterId.hashCode() : 0);
    result = 31 * result + (rid != null ? rid.hashCode() : 0);
    result = 31 * result + (alias != null ? alias.hashCode() : 0);
    result = 31 * result + (filter != null ? filter.hashCode() : 0);
    result = 31 * result + (whileCondition != null ? whileCondition.hashCode() : 0);
    result = 31 * result + (depth != null ? depth.hashCode() : 0);
    result = 31 * result + (maxDepth != null ? maxDepth.hashCode() : 0);
    result = 31 * result + (optional != null ? optional.hashCode() : 0);
    result = 31 * result + (depthAlias != null ? depthAlias.hashCode() : 0);
    result = 31 * result + (pathAlias != null ? pathAlias.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=74bf4765509f102180cac29f2295031e (do not edit this line) */

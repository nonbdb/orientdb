/* Generated By:JJTree: Do not edit this line. SQLContainsAnyCondition.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.internal.common.collection.MultiValue;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaClassInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.IndexSearchInfo;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexCandidate;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexFinder;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

public class SQLContainsAnyCondition extends SQLBooleanExpression {

  protected SQLExpression left;

  protected SQLExpression right;

  protected SQLOrBlock rightBlock;

  public SQLContainsAnyCondition(int id) {
    super(id);
  }

  public SQLContainsAnyCondition(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public boolean execute(Object left, Object right) {
    if (left instanceof Collection) {
      if (right instanceof Iterable) {
        right = ((Iterable) right).iterator();
      }
      if (right instanceof Iterator iterator) {
        while (iterator.hasNext()) {
          var next = iterator.next();
          if (((Collection) left).contains(next)) {
            return true;
          }
          if (next instanceof Result
              && ((Result) next).isEntity()
              && ((Collection) left).contains(((Result) next).asEntity())) {
            return true;
          }
        }
      }
      return false;
    }
    if (left instanceof Iterable) {
      left = ((Iterable) left).iterator();
    }
    if (left instanceof Iterator leftIterator) {
      if (!(right instanceof Iterable)) {
        right = Collections.singleton(right);
      }
      right = ((Iterable) right).iterator();

      var rightIterator = (Iterator) right;
      while (rightIterator.hasNext()) {
        var leftItem = rightIterator.next();
        while (leftIterator.hasNext()) {
          var rightItem = leftIterator.next();
          if (leftItem != null && leftItem.equals(rightItem)) {
            return true;
          }
          var leftElem =
              leftItem instanceof Result && ((Result) leftItem).isEntity()
                  ? ((Result) leftItem).castToEntity()
                  : rightItem;
          var rightElem =
              rightItem instanceof Result && ((Result) rightItem).isEntity()
                  ? ((Result) rightItem).castToEntity()
                  : rightItem;
          if (leftElem != null && leftElem.equals(rightElem)) {
            return true;
          }
        }
      }
    }
    return false;
  }

  @Override
  public boolean evaluate(Identifiable currentRecord, CommandContext ctx) {
    var leftValue = left.execute(currentRecord, ctx);
    if (right != null) {
      var rightValue = right.execute(currentRecord, ctx);
      return execute(leftValue, rightValue);
    } else {
      if (!MultiValue.isMultiValue(leftValue)) {
        return false;
      }
      var iter = MultiValue.getMultiValueIterator(leftValue);
      while (iter.hasNext()) {
        var item = iter.next();
        if (item instanceof Identifiable) {
          if (!rightBlock.evaluate((Identifiable) item, ctx)) {
            return false;
          }
        } else if (item instanceof Result) {
          if (!rightBlock.evaluate((Result) item, ctx)) {
            return false;
          }
        } else {
          return false;
        }
      }
      return true;
    }
  }

  @Override
  public boolean evaluate(Result currentRecord, CommandContext ctx) {
    var leftValue = left.execute(currentRecord, ctx);
    if (right != null) {
      var rightValue = right.execute(currentRecord, ctx);
      return execute(leftValue, rightValue);
    } else {
      if (!MultiValue.isMultiValue(leftValue)) {
        return false;
      }
      var iter = MultiValue.getMultiValueIterator(leftValue);
      while (iter.hasNext()) {
        var item = iter.next();
        if (item instanceof Identifiable) {
          if (!rightBlock.evaluate((Identifiable) item, ctx)) {
            return false;
          }
        } else if (item instanceof Result) {
          if (!rightBlock.evaluate((Result) item, ctx)) {
            return false;
          }
        } else {
          return false;
        }
      }
      return true;
    }
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    left.toString(params, builder);
    builder.append(" CONTAINSANY ");
    if (right != null) {
      right.toString(params, builder);
    } else if (rightBlock != null) {
      builder.append("(");
      rightBlock.toString(params, builder);
      builder.append(")");
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    left.toGenericStatement(builder);
    builder.append(" CONTAINSANY ");
    if (right != null) {
      right.toGenericStatement(builder);
    } else if (rightBlock != null) {
      builder.append("(");
      rightBlock.toGenericStatement(builder);
      builder.append(")");
    }
  }

  public SQLExpression getLeft() {
    return left;
  }

  public void setLeft(SQLExpression left) {
    this.left = left;
  }

  public SQLExpression getRight() {
    return right;
  }

  public void setRight(SQLExpression right) {
    this.right = right;
  }

  @Override
  public boolean supportsBasicCalculation() {
    if (left != null && !left.supportsBasicCalculation()) {
      return false;
    }
    if (right != null && !right.supportsBasicCalculation()) {
      return false;
    }
    return rightBlock == null || rightBlock.supportsBasicCalculation();
  }

  @Override
  protected int getNumberOfExternalCalculations() {
    var total = 0;
    if (left != null && !left.supportsBasicCalculation()) {
      total++;
    }
    if (right != null && !right.supportsBasicCalculation()) {
      total++;
    }
    if (rightBlock != null && !rightBlock.supportsBasicCalculation()) {
      total++;
    }
    return total;
  }

  @Override
  protected List<Object> getExternalCalculationConditions() {
    List<Object> result = new ArrayList<Object>();
    if (left != null && !left.supportsBasicCalculation()) {
      result.add(left);
    }
    if (right != null && !right.supportsBasicCalculation()) {
      result.add(right);
    }
    if (rightBlock != null) {
      result.addAll(rightBlock.getExternalCalculationConditions());
    }
    return result;
  }

  @Override
  public boolean needsAliases(Set<String> aliases) {
    if (left.needsAliases(aliases)) {
      return true;
    }

    if (right != null && right.needsAliases(aliases)) {
      return true;
    }
    return rightBlock != null && rightBlock.needsAliases(aliases);
  }

  @Override
  public SQLContainsAnyCondition copy() {
    var result = new SQLContainsAnyCondition(-1);
    result.left = left.copy();
    result.right = right == null ? null : right.copy();
    result.rightBlock = rightBlock == null ? null : rightBlock.copy();
    return result;
  }

  @Override
  public void extractSubQueries(SubQueryCollector collector) {
    left.extractSubQueries(collector);
    if (right != null) {
      right.extractSubQueries(collector);
    }
    if (rightBlock != null) {
      rightBlock.extractSubQueries(collector);
    }
  }

  @Override
  public boolean refersToParent() {
    if (left != null && left.refersToParent()) {
      return true;
    }
    if (right != null && right.refersToParent()) {
      return true;
    }
    return rightBlock != null && rightBlock.refersToParent();
  }

  @Override
  public SQLBooleanExpression rewriteIndexChainsAsSubqueries(CommandContext ctx,
      SchemaClassInternal clazz) {
    if (right.isEarlyCalculated(ctx) && left.isIndexChain(ctx, clazz)) {
      var result = new SQLContainsAnyCondition(-1);

      result.left = new SQLExpression(-1);
      var base = new SQLBaseExpression(-1);
      var identifier = new SQLBaseIdentifier(-1);
      identifier.suffix = new SQLSuffixIdentifier(-1);
      identifier.suffix.setIdentifier(
          ((SQLBaseExpression) left.mathExpression).getIdentifier().suffix.getIdentifier());
      base.setIdentifier(identifier);
      result.left.mathExpression = base;

      var nextClazz =
          clazz
              .getProperty(ctx.getDatabaseSession(),
                  base.getIdentifier().suffix.getIdentifier().getStringValue())
              .getLinkedClass(ctx.getDatabaseSession());
      var newRight = new SQLParenthesisExpression(-1);
      newRight.statement =
          SQLBinaryCondition.indexChainToStatement(
              ((SQLBaseExpression) left.mathExpression).modifier, nextClazz, right, ctx);
      result.right = new SQLExpression(-1);
      result.right.mathExpression = newRight;
      return result;
    }
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLContainsAnyCondition) o;

    if (!Objects.equals(left, that.left)) {
      return false;
    }
    if (!Objects.equals(right, that.right)) {
      return false;
    }
    return Objects.equals(rightBlock, that.rightBlock);
  }

  @Override
  public int hashCode() {
    var result = left != null ? left.hashCode() : 0;
    result = 31 * result + (right != null ? right.hashCode() : 0);
    result = 31 * result + (rightBlock != null ? rightBlock.hashCode() : 0);
    return result;
  }

  @Override
  public List<String> getMatchPatternInvolvedAliases() {
    var leftX = left == null ? null : left.getMatchPatternInvolvedAliases();
    var rightX = right == null ? null : right.getMatchPatternInvolvedAliases();
    var rightBlockX =
        rightBlock == null ? null : rightBlock.getMatchPatternInvolvedAliases();

    List<String> result = new ArrayList<String>();
    if (leftX != null) {
      result.addAll(leftX);
    }
    if (rightX != null) {
      result.addAll(rightX);
    }
    if (rightBlockX != null) {
      result.addAll(rightBlockX);
    }

    return result.size() == 0 ? null : result;
  }

  @Override
  public boolean isCacheable(DatabaseSessionInternal session) {
    if (left != null && !left.isCacheable(session)) {
      return false;
    }

    if (right != null && !right.isCacheable(session)) {
      return false;
    }

    return rightBlock == null || rightBlock.isCacheable(session);
  }

  @Override
  public boolean isIndexAware(IndexSearchInfo info) {
    if (left.isBaseIdentifier()) {
      if (info.getField().equals(left.getDefaultAlias().getStringValue())) {
        return right.isEarlyCalculated(info.getCtx());
      }
    }
    return false;
  }

  @Override
  public Optional<IndexCandidate> findIndex(IndexFinder info, CommandContext ctx) {
    var path = left.getPath();
    if (path.isPresent()) {
      if (right.isEarlyCalculated(ctx)) {
        var value = right.execute((Result) null, ctx);
        return info.findExactIndex(path.get(), value, ctx);
      }
    }
    return Optional.empty();
  }

  @Override
  public SQLExpression resolveKeyFrom(SQLBinaryCondition additional) {
    if (right != null) {
      return right;
    } else {
      throw new UnsupportedOperationException("Cannot execute index query with " + this);
    }
  }

  @Override
  public SQLExpression resolveKeyTo(SQLBinaryCondition additional) {
    if (right != null) {
      return right;
    } else {
      throw new UnsupportedOperationException("Cannot execute index query with " + this);
    }
  }
}
/* JavaCC - OriginalChecksum=7992ab9e8e812c6d9358ede8b67b4506 (do not edit this line) */

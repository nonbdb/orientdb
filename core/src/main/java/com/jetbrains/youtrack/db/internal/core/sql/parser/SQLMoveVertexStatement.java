/* Generated By:JJTree: Do not edit this line. SQLMoveVertexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.internal.core.command.BasicCommandContext;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.MoveVertexExecutionPlanner;
import com.jetbrains.youtrack.db.internal.core.sql.executor.UpdateExecutionPlan;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class SQLMoveVertexStatement extends SQLStatement {

  protected SQLFromItem source;
  protected SQLCluster targetCluster;
  protected SQLIdentifier targetClass;
  protected SQLUpdateOperations updateOperations;
  protected SQLBatch batch;

  public SQLMoveVertexStatement(int id) {
    super(id);
  }

  public SQLMoveVertexStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal db, Object[] args, CommandContext parentCtx,
      boolean usePlanCache) {
    Map<Object, Object> params = new HashMap<>();
    if (args != null) {
      for (var i = 0; i < args.length; i++) {
        params.put(i, args[i]);
      }
    }
    return execute(db, params, parentCtx, usePlanCache);
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal db, Map<Object, Object> params, CommandContext parentCtx,
      boolean usePlanCache) {
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabase(db);
    ctx.setInputParameters(params);
    UpdateExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = createExecutionPlan(ctx, false);
    } else {
      executionPlan = (UpdateExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }
    executionPlan.executeInternal();
    return new LocalResultSet(executionPlan);
  }

  public UpdateExecutionPlan createExecutionPlan(CommandContext ctx, boolean enableProfiling) {
    var planner = new MoveVertexExecutionPlanner(this);
    return planner.createExecutionPlan(ctx, enableProfiling);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("MOVE VERTEX ");
    source.toString(params, builder);
    builder.append(" TO ");
    if (targetCluster != null) {
      targetCluster.toString(params, builder);
    } else {
      builder.append("CLASS:");
      targetClass.toString(params, builder);
    }

    if (updateOperations != null) {
      builder.append(" ");
      updateOperations.toString(params, builder);
    }

    if (batch != null) {
      builder.append(" ");
      batch.toString(params, builder);
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    builder.append("MOVE VERTEX ");
    source.toGenericStatement(builder);
    builder.append(" TO ");
    if (targetCluster != null) {
      targetCluster.toGenericStatement(builder);
    } else {
      builder.append("CLASS:");
      targetClass.toGenericStatement(builder);
    }

    if (updateOperations != null) {
      builder.append(" ");
      updateOperations.toGenericStatement(builder);
    }

    if (batch != null) {
      builder.append(" ");
      batch.toGenericStatement(builder);
    }
  }

  @Override
  public SQLMoveVertexStatement copy() {
    var result = new SQLMoveVertexStatement(-1);
    result.source = source.copy();
    result.targetClass = targetClass == null ? null : targetClass.copy();
    result.targetCluster = targetCluster == null ? null : targetCluster.copy();
    result.updateOperations = updateOperations == null ? null : updateOperations.copy();
    result.batch = batch == null ? null : batch.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLMoveVertexStatement) o;

    if (!source.equals(that.source)) {
      return false;
    }
    if (!Objects.equals(targetCluster, that.targetCluster)) {
      return false;
    }
    if (!Objects.equals(targetClass, that.targetClass)) {
      return false;
    }
    if (!Objects.equals(updateOperations, that.updateOperations)) {
      return false;
    }
    return Objects.equals(batch, that.batch);
  }

  @Override
  public int hashCode() {
    var result = source.hashCode();
    result = 31 * result + (targetCluster != null ? targetCluster.hashCode() : 0);
    result = 31 * result + (targetClass != null ? targetClass.hashCode() : 0);
    result = 31 * result + (updateOperations != null ? updateOperations.hashCode() : 0);
    result = 31 * result + (batch != null ? batch.hashCode() : 0);
    return result;
  }

  public SQLFromItem getSource() {
    return source;
  }

  public void setSource(SQLFromItem source) {
    this.source = source;
  }

  public SQLCluster getTargetCluster() {
    return targetCluster;
  }

  public void setTargetCluster(SQLCluster targetCluster) {
    this.targetCluster = targetCluster;
  }

  public SQLIdentifier getTargetClass() {
    return targetClass;
  }

  public void setTargetClass(SQLIdentifier targetClass) {
    this.targetClass = targetClass;
  }

  public SQLUpdateOperations getUpdateOperations() {
    return updateOperations;
  }

  public void setUpdateOperations(SQLUpdateOperations updateOperations) {
    this.updateOperations = updateOperations;
  }

  public SQLBatch getBatch() {
    return batch;
  }

  public void setBatch(SQLBatch batch) {
    this.batch = batch;
  }
}
/* JavaCC - OriginalChecksum=5cb0b9d3644fd28813ff615fe59d577d (do not edit this line) */

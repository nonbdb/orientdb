/* Generated By:JJTree: Do not edit this line. SQLCreatePropertyAttributeStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.BaseException;
import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaPropertyImpl;
import java.util.Map;
import java.util.Objects;

public class SQLCreatePropertyAttributeStatement extends SimpleNode {

  public SQLIdentifier settingName;
  public SQLExpression settingValue;

  public SQLCreatePropertyAttributeStatement(int id) {
    super(id);
  }

  public SQLCreatePropertyAttributeStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    settingName.toString(params, builder);
    if (settingValue != null) {
      builder.append(" ");
      settingValue.toString(params, builder);
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    settingName.toGenericStatement(builder);
    if (settingValue != null) {
      builder.append(" ");
      settingValue.toGenericStatement(builder);
    }
  }

  public SQLCreatePropertyAttributeStatement copy() {
    var result = new SQLCreatePropertyAttributeStatement(-1);
    result.settingName = settingName == null ? null : settingName.copy();
    result.settingValue = settingValue == null ? null : settingValue.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLCreatePropertyAttributeStatement) o;

    if (!Objects.equals(settingName, that.settingName)) {
      return false;
    }
    return Objects.equals(settingValue, that.settingValue);
  }

  @Override
  public int hashCode() {
    var result = settingName != null ? settingName.hashCode() : 0;
    result = 31 * result + (settingValue != null ? settingValue.hashCode() : 0);
    return result;
  }

  public Object setOnProperty(SchemaPropertyImpl internalProp, CommandContext ctx) {
    var attrName = settingName.getStringValue();
    var session = ctx.getDatabaseSession();
    var attrValue =
        this.settingValue == null ? true : this.settingValue.execute((Identifiable) null, ctx);
    try {
      if (attrName.equalsIgnoreCase("readonly")) {
        internalProp.setReadonly(session, (boolean) attrValue);
      } else if (attrName.equalsIgnoreCase("mandatory")) {
        internalProp.setMandatory(session, (boolean) attrValue);
      } else if (attrName.equalsIgnoreCase("notnull")) {
        internalProp.setNotNull(session, (boolean) attrValue);
      } else if (attrName.equalsIgnoreCase("max")) {
        internalProp.setMax(session, "" + attrValue);
      } else if (attrName.equalsIgnoreCase("min")) {
        internalProp.setMin(session, "" + attrValue);
      } else if (attrName.equalsIgnoreCase("default")) {
        if (this.settingValue == null) {
          throw new CommandExecutionException(session, "");
        }
        internalProp.setDefaultValue(session, "" + attrValue);
      } else if (attrName.equalsIgnoreCase("collate")) {
        internalProp.setCollate(session, "" + attrValue);
      } else if (attrName.equalsIgnoreCase("regexp")) {
        internalProp.setRegexp(session, "" + attrValue);
      } else {
        throw new CommandExecutionException(session,
            "Invalid attribute definition: '" + attrName + "'");
      }
    } catch (Exception e) {
      throw BaseException.wrapException(
          new CommandExecutionException(session,
              "Cannot set attribute on property " + settingName.getStringValue() + " " + attrValue),
          e, session);
    }
    return attrValue;
  }
}
/* JavaCC - OriginalChecksum=6a7964c2b9dad541ca962eecea00651b (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLCreateSequenceStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.internal.common.log.LogManager;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.metadata.sequence.DBSequence;
import com.jetbrains.youtrack.db.internal.core.metadata.sequence.SequenceOrderType;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ExecutionException;

public class SQLCreateSequenceStatement extends SQLSimpleExecStatement {

  public static final int TYPE_CACHED = 0;
  public static final int TYPE_ORDERED = 1;

  SQLIdentifier name;

  public boolean ifNotExists = false;

  int type;
  SQLExpression start;
  SQLExpression increment;
  SQLExpression cache;
  boolean positive = DBSequence.DEFAULT_ORDER_TYPE == SequenceOrderType.ORDER_POSITIVE;
  boolean cyclic = DBSequence.DEFAULT_RECYCLABLE_VALUE;
  SQLExpression limitValue;

  public SQLCreateSequenceStatement(int id) {
    super(id);
  }

  public SQLCreateSequenceStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeSimple(CommandContext ctx) {
    var db = ctx.getDatabase();
    DBSequence seq =
        db
            .getMetadata()
            .getSequenceLibrary()
            .getSequence(this.name.getStringValue());
    if (seq != null) {
      if (ifNotExists) {
        return ExecutionStream.empty();
      } else {
        throw new CommandExecutionException(
            "Sequence " + name.getStringValue() + " already exists");
      }
    }
    ResultInternal result = new ResultInternal(db);
    result.setProperty("operation", "create sequence");
    result.setProperty("name", name.getStringValue());

    try {
      executeInternal(ctx, result);
    } catch (ExecutionException | InterruptedException exc) {
      String message = "Unable to execute command: " + exc.getMessage();
      LogManager.instance().error(this, message, exc, (Object) null);
      throw new CommandExecutionException(message);
    }

    return ExecutionStream.singleton(result);
  }

  private void executeInternal(CommandContext ctx, ResultInternal result)
      throws ExecutionException, InterruptedException {
    DBSequence.CreateParams params = createParams(ctx, result);
    DBSequence.SEQUENCE_TYPE seqType =
        type == TYPE_CACHED ? DBSequence.SEQUENCE_TYPE.CACHED : DBSequence.SEQUENCE_TYPE.ORDERED;
    result.setProperty("type", seqType.toString());
    ctx.getDatabase()
        .getMetadata()
        .getSequenceLibrary()
        .createSequence(this.name.getStringValue(), seqType, params);
  }

  private DBSequence.CreateParams createParams(CommandContext ctx, ResultInternal result) {
    DBSequence.CreateParams params = new DBSequence.CreateParams();
    if (start != null) {
      Object o = start.execute((Identifiable) null, ctx);
      if (o instanceof Number) {
        params.setStart(((Number) o).longValue());
        result.setProperty("start", o);
      } else {
        throw new CommandExecutionException("Invalid start value: " + o);
      }
    }
    if (increment != null) {
      Object o = increment.execute((Identifiable) null, ctx);
      if (o instanceof Number) {
        params.setIncrement(((Number) o).intValue());
        result.setProperty("increment", o);
      } else {
        throw new CommandExecutionException("Invalid increment value: " + o);
      }
    }
    if (cache != null) {
      Object o = cache.execute((Identifiable) null, ctx);
      if (o instanceof Number) {
        params.setCacheSize(((Number) o).intValue());
        result.setProperty("cacheSize", o);
      } else {
        throw new CommandExecutionException("Invalid cache value: " + o);
      }
    }

    if (limitValue != null) {
      Object o = limitValue.execute((Identifiable) null, ctx);
      if (o instanceof Number) {
        params.setLimitValue(((Number) o).longValue());
        result.setProperty("limitValue", o);
      } else {
        throw new CommandExecutionException("Invalid limit value: " + o);
      }
    }

    params.setOrderType(
        positive ? SequenceOrderType.ORDER_POSITIVE : SequenceOrderType.ORDER_NEGATIVE);
    result.setProperty("orderType", params.getOrderType().toString());
    params.setRecyclable(cyclic);
    result.setProperty("recycable", params.getRecyclable());

    return params;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE SEQUENCE ");
    name.toString(params, builder);
    if (ifNotExists) {
      builder.append(" IF NOT EXISTS");
    }
    builder.append(" TYPE ");
    switch (type) {
      case TYPE_CACHED:
        builder.append(" CACHED");
        break;
      case TYPE_ORDERED:
        builder.append(" ORDERED");
        break;
      default:
        throw new IllegalStateException("Invalid type for CREATE SEQUENCE: " + type);
    }

    if (start != null) {
      builder.append(" START ");
      start.toString(params, builder);
    }
    if (increment != null) {
      builder.append(" INCREMENT ");
      increment.toString(params, builder);
    }
    if (cache != null) {
      builder.append(" CACHE ");
      cache.toString(params, builder);
    }
    if (limitValue != null) {
      builder.append(" LIMIT ");
      limitValue.toString(params, builder);
    }
    if (cyclic != DBSequence.DEFAULT_RECYCLABLE_VALUE) {
      builder.append(" CYCLE ").append(Boolean.toString(cyclic).toUpperCase());
    }
    if (positive) {
      builder.append(" ASC");
    } else {
      builder.append(" DESC");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("CREATE SEQUENCE ");
    name.toGenericStatement(builder);
    if (ifNotExists) {
      builder.append(" IF NOT EXISTS");
    }
    builder.append(" TYPE ");
    switch (type) {
      case TYPE_CACHED:
        builder.append(" CACHED");
        break;
      case TYPE_ORDERED:
        builder.append(" ORDERED");
        break;
      default:
        throw new IllegalStateException("Invalid type for CREATE SEQUENCE: " + type);
    }

    if (start != null) {
      builder.append(" START ");
      start.toGenericStatement(builder);
    }
    if (increment != null) {
      builder.append(" INCREMENT ");
      increment.toGenericStatement(builder);
    }
    if (cache != null) {
      builder.append(" CACHE ");
      cache.toGenericStatement(builder);
    }
    if (limitValue != null) {
      builder.append(" LIMIT ");
      limitValue.toGenericStatement(builder);
    }
    if (cyclic != DBSequence.DEFAULT_RECYCLABLE_VALUE) {
      builder.append(" CYCLE ").append(Boolean.toString(cyclic).toUpperCase());
    }
    if (positive) {
      builder.append(" ASC");
    } else {
      builder.append(" DESC");
    }
  }

  @Override
  public SQLCreateSequenceStatement copy() {
    SQLCreateSequenceStatement result = new SQLCreateSequenceStatement(-1);
    result.name = name == null ? null : name.copy();
    result.ifNotExists = this.ifNotExists;
    result.type = type;
    result.start = start == null ? null : start.copy();
    result.increment = increment == null ? null : increment.copy();
    result.cache = cache == null ? null : cache.copy();
    result.limitValue = limitValue == null ? null : limitValue.copy();
    result.cyclic = cyclic;
    result.positive = positive;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    SQLCreateSequenceStatement that = (SQLCreateSequenceStatement) o;

    if (ifNotExists != that.ifNotExists) {
      return false;
    }
    if (type != that.type) {
      return false;
    }
    if (!Objects.equals(name, that.name)) {
      return false;
    }
    if (!Objects.equals(start, that.start)) {
      return false;
    }
    if (!Objects.equals(increment, that.increment)) {
      return false;
    }
    if (!Objects.equals(cache, that.cache)) {
      return false;
    }
    if (!Objects.equals(limitValue, that.limitValue)) {
      return false;
    }
    if (cyclic != that.cyclic) {
      return false;
    }
    return positive == that.positive;
  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (ifNotExists ? 1 : 0);
    result = 31 * result + type;
    result = 31 * result + (start != null ? start.hashCode() : 0);
    result = 31 * result + (increment != null ? increment.hashCode() : 0);
    result = 31 * result + (cache != null ? cache.hashCode() : 0);
    result = 31 * result + (limitValue != null ? limitValue.hashCode() : 0);
    result = 31 * result + Boolean.hashCode(cyclic);
    result = 31 * result + Boolean.hashCode(positive);
    return result;
  }
}
/* JavaCC - OriginalChecksum=b0436d11e05c3435f22dafea6b5106c0 (do not edit this line) */

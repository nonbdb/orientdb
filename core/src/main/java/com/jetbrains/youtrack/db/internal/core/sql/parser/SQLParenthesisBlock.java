/* Generated By:JJTree: Do not edit this line. SQLParenthesisBlock.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexCandidate;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexFinder;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

public class SQLParenthesisBlock extends SQLBooleanExpression {

  protected SQLBooleanExpression subElement;

  public SQLParenthesisBlock(int id) {
    super(id);
  }

  public SQLParenthesisBlock(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public boolean evaluate(Identifiable currentRecord, CommandContext ctx) {
    return subElement.evaluate(currentRecord, ctx);
  }

  @Override
  public boolean evaluate(Result currentRecord, CommandContext ctx) {
    return subElement.evaluate(currentRecord, ctx);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("(");
    subElement.toString(params, builder);
    builder.append(" )");
  }

  public void toGenericStatement(StringBuilder builder) {
    builder.append("(");
    subElement.toGenericStatement(builder);
    builder.append(" )");
  }

  @Override
  public boolean supportsBasicCalculation() {
    return subElement.supportsBasicCalculation();
  }

  @Override
  protected int getNumberOfExternalCalculations() {
    return subElement.getNumberOfExternalCalculations();
  }

  @Override
  protected List<Object> getExternalCalculationConditions() {
    return subElement.getExternalCalculationConditions();
  }

  @Override
  public List<SQLAndBlock> flatten() {
    return subElement.flatten();
  }

  @Override
  public boolean needsAliases(Set<String> aliases) {
    return subElement.needsAliases(aliases);
  }

  @Override
  public SQLParenthesisBlock copy() {
    var result = new SQLParenthesisBlock(-1);
    result.subElement = subElement.copy();
    return result;
  }

  @Override
  public void extractSubQueries(SubQueryCollector collector) {
    this.subElement.extractSubQueries(collector);
  }

  @Override
  public boolean refersToParent() {
    return subElement.refersToParent();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLParenthesisBlock) o;

    return Objects.equals(subElement, that.subElement);
  }

  @Override
  public int hashCode() {
    return subElement != null ? subElement.hashCode() : 0;
  }

  @Override
  public List<String> getMatchPatternInvolvedAliases() {
    return subElement.getMatchPatternInvolvedAliases();
  }

  @Override
  public void translateLuceneOperator() {
    subElement.translateLuceneOperator();
  }

  @Override
  public boolean isCacheable(DatabaseSessionInternal session) {
    return subElement.isCacheable(session);
  }

  public Optional<IndexCandidate> findIndex(IndexFinder info, CommandContext ctx) {
    return subElement.findIndex(info, ctx);
  }

  @Override
  public boolean isAlwaysTrue() {
    return subElement.isAlwaysTrue();
  }
}
/* JavaCC - OriginalChecksum=9a16b6cf7d051382acb94c45067631a9 (do not edit this line) */

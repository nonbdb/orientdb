/* Generated By:JJTree: Do not edit this line. SQLGeOperator.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

/*
 *
 *  *  Copyright YouTrackDB
 *  *
 *  *  Licensed under the Apache License, Version 2.0 (the "License");
 *  *  you may not use this file except in compliance with the License.
 *  *  You may obtain a copy of the License at
 *  *
 *  *       http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  *  Unless required by applicable law or agreed to in writing, software
 *  *  distributed under the License is distributed on an "AS IS" BASIS,
 *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  *  See the License for the specific language governing permissions and
 *  *  limitations under the License.
 *  *
 *
 *
 */

package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.common.log.LogManager;
import com.jetbrains.youtrack.db.api.schema.PropertyType;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexFinder.Operation;
import java.util.Map;

public class SQLGeOperator extends SimpleNode implements SQLBinaryCompareOperator {

  public SQLGeOperator(int id) {
    super(id);
  }

  public SQLGeOperator(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public boolean execute(Object iLeft, Object iRight) {
    if (iLeft == iRight) {
      return true;
    }
    if (iLeft == null || iRight == null) {
      return false;
    }
    if (iLeft.getClass() != iRight.getClass()
        && iLeft instanceof Number
        && iRight instanceof Number) {
      var couple = PropertyType.castComparableNumber((Number) iLeft, (Number) iRight);
      iLeft = couple[0];
      iRight = couple[1];
    } else {
      try {
        iRight = PropertyType.convert(null, iRight, iLeft.getClass());
      } catch (RuntimeException e) {
        iRight = null;
        // Can't convert to the target value.
        LogManager.instance()
            .warn(this, "Issue converting value to target type, ignoring value", e);
      }
    }
    if (iRight == null) {
      return false;
    }
    return ((Comparable<Object>) iLeft).compareTo(iRight) >= 0;
  }

  @Override
  public String toString() {
    return ">=";
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append(">=");
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append(">=");
  }

  @Override
  public boolean supportsBasicCalculation() {
    return true;
  }

  @Override
  public SQLGeOperator copy() {
    return this;
  }

  @Override
  public boolean isRangeOperator() {
    return true;
  }

  @Override
  public Operation getOperation() {
    return Operation.Ge;
  }

  @Override
  public boolean equals(Object obj) {
    return obj != null && obj.getClass().equals(this.getClass());
  }

  @Override
  public int hashCode() {
    return getClass().hashCode();
  }
}
/* JavaCC - OriginalChecksum=960da239569d393eb155f7d8a871e6d5 (do not edit this line) */

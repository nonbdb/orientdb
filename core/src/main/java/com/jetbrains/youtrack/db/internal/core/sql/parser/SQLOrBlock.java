/* Generated By:JJTree: Do not edit this line. SQLOrBlock.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.schema.SchemaClass;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaClassInternal;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexCandidate;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.IndexFinder;
import com.jetbrains.youtrack.db.internal.core.sql.executor.metadata.RequiredIndexCanditate;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class SQLOrBlock extends SQLBooleanExpression {

  List<SQLBooleanExpression> subBlocks = new ArrayList<SQLBooleanExpression>();

  public SQLOrBlock(int id) {
    super(id);
  }

  public SQLOrBlock(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public boolean evaluate(Identifiable currentRecord, CommandContext ctx) {
    if (subBlocks == null) {
      return true;
    }

    for (SQLBooleanExpression block : subBlocks) {
      if (block.evaluate(currentRecord, ctx)) {
        return true;
      }
    }
    return false;
  }

  @Override
  public boolean evaluate(Result currentRecord, CommandContext ctx) {
    if (subBlocks == null) {
      return true;
    }

    for (SQLBooleanExpression block : subBlocks) {
      if (block.evaluate(currentRecord, ctx)) {
        return true;
      }
    }
    return false;
  }

  public boolean evaluate(Object currentRecord, CommandContext ctx) {
    if (currentRecord instanceof Result) {
      return evaluate((Result) currentRecord, ctx);
    } else if (currentRecord instanceof Identifiable) {
      return evaluate((Identifiable) currentRecord, ctx);
    } else if (currentRecord instanceof Map) {
      EntityImpl entity = new EntityImpl(null);
      entity.updateFromMap((Map<String, Object>) currentRecord);
      return evaluate(entity, ctx);
    }
    return false;
  }

  public List<SQLBooleanExpression> getSubBlocks() {
    return subBlocks;
  }

  public void setSubBlocks(List<SQLBooleanExpression> subBlocks) {
    this.subBlocks = subBlocks;
  }

  public void addSubBlock(SQLBooleanExpression block) {
    this.subBlocks.add(block);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (subBlocks == null || subBlocks.size() == 0) {
      return;
    }

    boolean first = true;
    for (SQLBooleanExpression expr : subBlocks) {
      if (!first) {
        builder.append(" OR ");
      }
      expr.toString(params, builder);
      first = false;
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    if (subBlocks == null || subBlocks.size() == 0) {
      return;
    }

    boolean first = true;
    for (SQLBooleanExpression expr : subBlocks) {
      if (!first) {
        builder.append(" OR ");
      }
      expr.toGenericStatement(builder);
      first = false;
    }
  }

  @Override
  protected boolean supportsBasicCalculation() {
    for (SQLBooleanExpression expr : subBlocks) {
      if (!expr.supportsBasicCalculation()) {
        return false;
      }
    }
    return true;
  }

  @Override
  protected int getNumberOfExternalCalculations() {
    int result = 0;
    for (SQLBooleanExpression expr : subBlocks) {
      result += expr.getNumberOfExternalCalculations();
    }
    return result;
  }

  @Override
  protected List<Object> getExternalCalculationConditions() {
    List<Object> result = new ArrayList<Object>();
    for (SQLBooleanExpression expr : subBlocks) {
      result.addAll(expr.getExternalCalculationConditions());
    }
    return result;
  }

  public List<SQLBinaryCondition> getIndexedFunctionConditions(
      SchemaClass iSchemaClass, DatabaseSessionInternal database) {
    if (subBlocks == null || subBlocks.size() > 1) {
      return null;
    }
    List<SQLBinaryCondition> result = new ArrayList<SQLBinaryCondition>();
    for (SQLBooleanExpression exp : subBlocks) {
      List<SQLBinaryCondition> sub = exp.getIndexedFunctionConditions(iSchemaClass, database);
      if (sub != null && sub.size() > 0) {
        result.addAll(sub);
      }
    }
    return result.size() == 0 ? null : result;
  }

  public List<SQLAndBlock> flatten() {
    List<SQLAndBlock> result = new ArrayList<SQLAndBlock>();
    for (SQLBooleanExpression sub : subBlocks) {
      List<SQLAndBlock> childFlattened = sub.flatten();
      for (SQLAndBlock child : childFlattened) {
        result.add(child);
      }
    }
    return result;
  }

  @Override
  public boolean needsAliases(Set<String> aliases) {
    for (SQLBooleanExpression expr : subBlocks) {
      if (expr.needsAliases(aliases)) {
        return true;
      }
    }
    return false;
  }

  @Override
  public SQLOrBlock copy() {
    SQLOrBlock result = new SQLOrBlock(-1);
    result.subBlocks = subBlocks.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    SQLOrBlock oOrBlock = (SQLOrBlock) o;

    return Objects.equals(subBlocks, oOrBlock.subBlocks);
  }

  @Override
  public int hashCode() {
    return subBlocks != null ? subBlocks.hashCode() : 0;
  }

  @Override
  public boolean isEmpty() {
    if (subBlocks.isEmpty()) {
      return true;
    }
    for (SQLBooleanExpression block : subBlocks) {
      if (!block.isEmpty()) {
        return false;
      }
    }
    return true;
  }

  @Override
  public void extractSubQueries(SubQueryCollector collector) {
    for (SQLBooleanExpression block : subBlocks) {
      block.extractSubQueries(collector);
    }
  }

  @Override
  public boolean refersToParent() {
    for (SQLBooleanExpression exp : subBlocks) {
      if (exp != null && exp.refersToParent()) {
        return true;
      }
    }
    return false;
  }

  @Override
  public List<String> getMatchPatternInvolvedAliases() {
    List<String> result = new ArrayList<String>();
    for (SQLBooleanExpression exp : subBlocks) {
      List<String> x = exp.getMatchPatternInvolvedAliases();
      if (x != null) {
        result.addAll(x);
      }
    }
    return result.size() == 0 ? null : result;
  }

  @Override
  public void translateLuceneOperator() {
    subBlocks.forEach(x -> x.translateLuceneOperator());
  }

  @Override
  public boolean isCacheable(DatabaseSessionInternal session) {
    for (SQLBooleanExpression block : this.subBlocks) {
      if (!block.isCacheable(session)) {
        return false;
      }
    }
    return true;
  }

  @Override
  public SQLBooleanExpression rewriteIndexChainsAsSubqueries(CommandContext ctx,
      SchemaClassInternal clazz) {
    for (SQLBooleanExpression exp : subBlocks) {
      exp.rewriteIndexChainsAsSubqueries(ctx, clazz);
    }
    return this;
  }

  public Optional<IndexCandidate> findIndex(IndexFinder info, CommandContext ctx) {
    Optional<IndexCandidate> result = Optional.empty();
    boolean first = true;
    for (SQLBooleanExpression exp : subBlocks) {
      Optional<IndexCandidate> singleResult = exp.findIndex(info, ctx);
      if (singleResult.isPresent()) {
        if (first) {
          result = singleResult;

        } else if (result.isPresent()) {
          if (result.get() instanceof RequiredIndexCanditate) {
            ((RequiredIndexCanditate) result.get()).addCanditate(singleResult.get());
          } else {
            RequiredIndexCanditate req = new RequiredIndexCanditate();
            req.addCanditate(result.get());
            req.addCanditate(singleResult.get());
            result = Optional.of(req);
          }
        } else {
          return Optional.empty();
        }
      } else {
        return Optional.empty();
      }
      first = false;
    }
    return result;
  }

  @Override
  public boolean isAlwaysTrue() {
    if (subBlocks.isEmpty()) {
      return true;
    }
    for (SQLBooleanExpression exp : subBlocks) {
      if (exp.isAlwaysTrue()) {
        return true;
      }
    }
    return false;
  }
}
/* JavaCC - OriginalChecksum=98d3077303a598705894dbb7bd4e1573 (do not edit this line) */

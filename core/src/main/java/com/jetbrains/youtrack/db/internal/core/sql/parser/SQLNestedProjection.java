/* Generated By:JJTree: Do not edit this line. OExpansion.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.record.Entity;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.db.record.ridbag.RidBag;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLNestedProjection extends SimpleNode {

  protected List<SQLNestedProjectionItem> includeItems = new ArrayList<>();
  protected List<SQLNestedProjectionItem> excludeItems = new ArrayList<>();
  protected SQLNestedProjectionItem starItem;
  private SQLInteger recursion; // not used for now

  public SQLNestedProjection(int id) {
    super(id);
  }

  public SQLNestedProjection(YouTrackDBSql p, int id) {
    super(p, id);
  }

  /**
   * @param expression
   * @param input
   * @param ctx
   */
  public Object apply(SQLExpression expression, Object input, CommandContext ctx) {
    if (input instanceof Result) {
      return apply(
          expression,
          (Result) input,
          ctx,
          recursion == null ? 0 : recursion.getValue().intValue());
    }
    if (input instanceof Identifiable) {
      return apply(
          expression,
          (Identifiable) input,
          ctx,
          recursion == null ? 0 : recursion.getValue().intValue());
    }
    if (input instanceof Map) {
      return apply(
          expression, (Map) input, ctx, recursion == null ? 0 : recursion.getValue().intValue());
    }
    if (input instanceof Collection) {
      return ((Collection) input)
          .stream().map(x -> apply(expression, x, ctx)).collect(Collectors.toList());
    }
    Iterator iter = null;
    if (input instanceof Iterable) {
      iter = ((Iterable) input).iterator();
    }
    if (input instanceof Iterator) {
      iter = (Iterator) input;
    }
    if (iter != null) {
      List result = new ArrayList();
      while (iter.hasNext()) {
        result.add(apply(expression, iter.next(), ctx));
      }
      return result;
    }
    return input;
  }

  private Object apply(SQLExpression expression, Result elem, CommandContext ctx, int recursion) {
    var result = new ResultInternal(ctx.getDatabaseSession());
    if (starItem != null || includeItems.isEmpty()) {
      for (var property : elem.getPropertyNames()) {
        if (isExclude(property)) {
          continue;
        }
        result.setProperty(
            property,
            convert(tryExpand(expression, property, elem.getProperty(property), ctx, recursion)));
      }
    }
    if (!includeItems.isEmpty()) {
      // TODO manage wildcards!
      for (var item : includeItems) {
        var alias =
            item.alias != null
                ? item.alias.getStringValue()
                : item.expression.getDefaultAlias().getStringValue();
        var value = item.expression.execute(elem, ctx);
        if (item.expansion != null) {
          value = item.expand(expression, alias, value, ctx, recursion - 1);
        }
        result.setProperty(alias, convert(value));
      }
    }
    return result;
  }

  private boolean isExclude(String propertyName) {
    for (var item : excludeItems) {
      if (item.matches(propertyName)) {
        return true;
      }
    }
    return false;
  }

  private Object tryExpand(
      SQLExpression rootExpr, String propName, Object propValue, CommandContext ctx,
      int recursion) {
    if (this.starItem != null && starItem.expansion != null) {
      return starItem.expand(rootExpr, propName, propValue, ctx, recursion);
    }
    for (var item : includeItems) {
      if (item.matches(propName) && item.expansion != null) {
        return item.expand(rootExpr, propName, propValue, ctx, recursion);
      }
    }
    return propValue;
  }

  private Object apply(
      SQLExpression expression, Identifiable input, CommandContext ctx, int recursion) {
    Entity elem;
    var db = ctx.getDatabaseSession();
    if (input instanceof Entity) {
      elem = (Entity) input;
    } else {
      var e = input.getRecord(db);
      if (e instanceof Entity) {
        elem = (Entity) e;
      } else {
        return input;
      }
    }
    var result = new ResultInternal(ctx.getDatabaseSession());
    if (starItem != null || includeItems.isEmpty()) {
      for (var property : elem.getPropertyNames()) {
        if (isExclude(property)) {
          continue;
        }
        result.setProperty(
            property,
            convert(tryExpand(expression, property, elem.getProperty(property), ctx, recursion)));
      }
    }

    if (includeItems.size() > 0) {
      // TODO manage wildcards!
      for (var item : includeItems) {
        var alias =
            item.alias != null
                ? item.alias.getStringValue()
                : item.expression.getDefaultAlias().getStringValue();
        var value = item.expression.execute(elem, ctx);
        if (item.expansion != null) {
          value = item.expand(expression, alias, value, ctx, recursion - 1);
        }
        result.setProperty(alias, convert(value));
      }
    }
    return result;
  }

  private Object apply(
      SQLExpression expression, Map<String, Object> input, CommandContext ctx, int recursion) {
    var result = new ResultInternal(ctx.getDatabaseSession());

    if (starItem != null || includeItems.size() == 0) {
      for (var property : input.keySet()) {
        if (isExclude(property)) {
          continue;
        }
        result.setProperty(
            property,
            convert(tryExpand(expression, property, input.get(property), ctx, recursion)));
      }
    }
    if (!includeItems.isEmpty()) {
      // TODO manage wildcards!
      for (var item : includeItems) {
        var alias =
            item.alias != null
                ? item.alias.getStringValue()
                : item.expression.getDefaultAlias().getStringValue();
        var elem = new ResultInternal(ctx.getDatabaseSession());
        input.forEach(elem::setProperty);
        var value = item.expression.execute(elem, ctx);
        if (item.expansion != null) {
          value = item.expand(expression, alias, value, ctx, recursion - 1);
        }
        result.setProperty(alias, convert(value));
      }
    }
    return result;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append(":{");
    var first = true;
    if (starItem != null) {
      starItem.toString(params, builder);
      first = false;
    }
    for (var item : includeItems) {
      if (!first) {
        builder.append(", ");
      }
      item.toString(params, builder);
      first = false;
    }
    for (var item : excludeItems) {
      if (!first) {
        builder.append(", ");
      }
      item.toString(params, builder);
      first = false;
    }

    builder.append("}");
    if (recursion != null) {
      builder.append("[");
      recursion.toString(params, builder);
      builder.append("]");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append(":{");
    var first = true;
    if (starItem != null) {
      starItem.toGenericStatement(builder);
      first = false;
    }
    for (var item : includeItems) {
      if (!first) {
        builder.append(", ");
      }
      item.toGenericStatement(builder);
      first = false;
    }
    for (var item : excludeItems) {
      if (!first) {
        builder.append(", ");
      }
      item.toGenericStatement(builder);
      first = false;
    }

    builder.append("}");
    if (recursion != null) {
      builder.append("[");
      recursion.toGenericStatement(builder);
      builder.append("]");
    }
  }

  public SQLNestedProjection copy() {
    var result = new SQLNestedProjection(-1);
    result.includeItems = includeItems.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.excludeItems = excludeItems.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.starItem = starItem == null ? null : starItem.copy();
    result.recursion = recursion == null ? null : recursion.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLNestedProjection) o;

    if (!Objects.equals(includeItems, that.includeItems)) {
      return false;
    }
    if (!Objects.equals(excludeItems, that.excludeItems)) {
      return false;
    }
    if (!Objects.equals(starItem, that.starItem)) {
      return false;
    }
    return Objects.equals(recursion, that.recursion);
  }

  @Override
  public int hashCode() {
    var result = includeItems != null ? includeItems.hashCode() : 0;
    result = 31 * result + (excludeItems != null ? excludeItems.hashCode() : 0);
    result = 31 * result + (starItem != null ? starItem.hashCode() : 0);
    result = 31 * result + (recursion != null ? recursion.hashCode() : 0);
    return result;
  }

  private Object convert(Object value) {
    if (value instanceof RidBag) {
      List result = new ArrayList();
      ((RidBag) value).forEach(x -> result.add(x));
      return result;
    }
    return value;
  }

  public Result serialize(DatabaseSessionInternal database) {
    var result = new ResultInternal(database);
    if (includeItems != null) {
      result.setProperty(
          "includeItems",
          includeItems.stream()
              .map(oNestedProjectionItem -> oNestedProjectionItem.serialize(database))
              .collect(Collectors.toList()));
    }
    if (excludeItems != null) {
      result.setProperty(
          "excludeItems",
          excludeItems.stream()
              .map(oNestedProjectionItem -> oNestedProjectionItem.serialize(database))
              .collect(Collectors.toList()));
    }
    if (starItem != null) {
      result.setProperty("starItem", starItem.serialize(database));
    }
    result.setProperty("recursion", recursion);
    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("includeItems") != null) {
      includeItems = new ArrayList<>();
      List<Result> ser = fromResult.getProperty("includeItems");
      for (var x : ser) {
        var item = new SQLNestedProjectionItem(-1);
        item.deserialize(x);
        includeItems.add(item);
      }
    }
    if (fromResult.getProperty("excludeItems") != null) {
      excludeItems = new ArrayList<>();
      List<Result> ser = fromResult.getProperty("excludeItems");
      for (var x : ser) {
        var item = new SQLNestedProjectionItem(-1);
        item.deserialize(x);
        excludeItems.add(item);
      }
    }
    if (fromResult.getProperty("starItem") != null) {
      starItem = new SQLNestedProjectionItem(-1);
      starItem.deserialize(fromResult.getProperty("starItem"));
    }
    recursion = fromResult.getProperty("recursion");
  }

  public void addExcludeItem(SQLNestedProjectionItem item) {
    this.excludeItems.add(item);
  }

  public void addIncludeItem(SQLNestedProjectionItem item) {
    this.includeItems.add(item);
  }
}
/* JavaCC - OriginalChecksum=a7faf9beb3c058e28999b17cb43b26f6 (do not edit this line) */

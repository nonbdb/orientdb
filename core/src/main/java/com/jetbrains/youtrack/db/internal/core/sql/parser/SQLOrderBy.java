/* Generated By:JJTree: Do not edit this line. SQLOrderBy.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLOrderBy extends SimpleNode {

  protected List<SQLOrderByItem> items;

  public SQLOrderBy() {
    super(-1);
  }

  public SQLOrderBy(int id) {
    super(id);
  }

  public SQLOrderBy(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public List<SQLOrderByItem> getItems() {
    return items;
  }

  public void setItems(List<SQLOrderByItem> items) {
    this.items = items;
  }

  public void addItem(SQLOrderByItem item) {
    this.items.add(item);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (items != null && items.size() > 0) {
      builder.append("ORDER BY ");
      for (var i = 0; i < items.size(); i++) {
        if (i > 0) {
          builder.append(", ");
        }
        items.get(i).toString(params, builder);
      }
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    if (items != null && items.size() > 0) {
      builder.append("ORDER BY ");
      for (var i = 0; i < items.size(); i++) {
        if (i > 0) {
          builder.append(", ");
        }
        items.get(i).toGenericStatement(builder);
      }
    }
  }

  public int compare(Result a, Result b, CommandContext ctx) {
    for (var item : items) {
      var result = item.compare(a, b, ctx);
      if (result != 0) {
        return result > 0 ? 1 : -1;
      }
    }
    return 0;
  }

  public SQLOrderBy copy() {
    var result = new SQLOrderBy(-1);
    result.items =
        items == null ? null : items.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var oOrderBy = (SQLOrderBy) o;

    return Objects.equals(items, oOrderBy.items);
  }

  @Override
  public int hashCode() {
    return items != null ? items.hashCode() : 0;
  }

  public void extractSubQueries(SubQueryCollector collector) {
    if (items != null) {
      for (var item : items) {
        item.extractSubQueries(collector);
      }
    }
  }

  public boolean refersToParent() {
    if (items != null) {
      for (var item : items) {
        if (item.refersToParent()) {
          return true;
        }
      }
    }
    return false;
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    if (items != null) {
      result.setProperty(
          "items", items.stream().map(oOrderByItem -> oOrderByItem.serialize(db))
              .collect(Collectors.toList()));
    }
    return result;
  }

  public void deserialize(Result fromResult) {

    if (fromResult.getProperty("items") != null) {
      List<Result> ser = fromResult.getProperty("items");
      items = new ArrayList<>();
      for (var r : ser) {
        var exp = new SQLOrderByItem();
        exp.deserialize(r);
        items.add(exp);
      }
    }
  }

  public boolean ordersWithCollate() {
    return items.stream().anyMatch(x -> x.getCollate() != null);
  }

  public boolean ordersSameDirection() {
    String order = null;
    for (var item : items) {
      if (order == null) {
        order = item.getType();
      } else if (!order.equals(item.getType())) {
        return false;
      }
    }
    return true;
  }

  public List<String> getProperties() {
    List<String> orderItems = new ArrayList<>();
    for (var item : items) {
      orderItems.add(item.getAlias() != null ? item.getAlias() : item.getRecordAttr());
    }
    return orderItems;
  }
}
/* JavaCC - OriginalChecksum=d5529400217169f15e556e5dc6fe4f5b (do not edit this line) */

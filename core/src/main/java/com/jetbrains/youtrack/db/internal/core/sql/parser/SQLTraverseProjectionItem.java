/* Generated By:JJTree: Do not edit this line. SQLTraverseProjectionItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.query.ResultSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

public class SQLTraverseProjectionItem extends SimpleNode {

  protected SQLBaseIdentifier base;
  protected SQLModifier modifier;

  public SQLTraverseProjectionItem(int id) {
    super(id);
  }

  public SQLTraverseProjectionItem(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public Object execute(Result iCurrentRecord, CommandContext ctx) {
    if (isStar()) {
      return handleStar(iCurrentRecord, ctx);
    }
    var result = base.execute(iCurrentRecord, ctx);
    if (modifier != null) {
      result = modifier.execute(iCurrentRecord, result, ctx);
    }
    return result;
  }

  private boolean isStar() {
    return base.toString().equals("*") && modifier == null;
  }

  public boolean refersToParent() {
    if (base != null && base.refersToParent()) {
      return true;
    }
    return modifier != null && modifier.refersToParent();
  }

  private Object handleStar(Result iCurrentRecord, CommandContext ctx) {
    Set<Object> result = new HashSet<>();
    for (var prop : iCurrentRecord.getPropertyNames()) {
      var val = iCurrentRecord.getProperty(prop);
      if (isOResult(val) || isValidIdentifiable(val)) {
        result.add(val);

      } else {
        if (val instanceof Iterable) {
          val = ((Iterable) val).iterator();
        }
        if (val instanceof Iterator) {
          while (((Iterator) val).hasNext()) {
            var sub = ((Iterator) val).next();
            if (isOResult(sub) || isValidIdentifiable(sub)) {
              result.add(sub);
            }
          }
        } else if (val instanceof ResultSet) {
          while (((ResultSet) val).hasNext()) {
            result.add(((ResultSet) val).next());
          }
        }
      }
    }
    return result;
  }

  private boolean isValidIdentifiable(Object val) {
    if (!(val instanceof Identifiable)) {
      return false;
    }
    return ((Identifiable) val).getIdentity().isPersistent();
  }

  private boolean isOResult(Object val) {
    return val instanceof Result;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {

    base.toString(params, builder);
    if (modifier != null) {
      modifier.toString(params, builder);
    }
  }

  public void toGenericStatement(StringBuilder builder) {

    base.toGenericStatement(builder);
    if (modifier != null) {
      modifier.toGenericStatement(builder);
    }
  }

  public SQLTraverseProjectionItem copy() {
    var result = new SQLTraverseProjectionItem(-1);
    result.base = base == null ? null : base.copy();
    result.modifier = modifier == null ? null : modifier.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLTraverseProjectionItem) o;

    if (!Objects.equals(base, that.base)) {
      return false;
    }
    return Objects.equals(modifier, that.modifier);
  }

  @Override
  public int hashCode() {
    var result = (base != null ? base.hashCode() : 0);
    result = 31 * result + (modifier != null ? modifier.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=0c562254fd4d11266edc0504fd36fc99 (do not edit this line) */

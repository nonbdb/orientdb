/* Generated By:JJTree: Do not edit this line. SQLAlterDatabaseStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.DatabaseSession;
import com.jetbrains.youtrack.db.api.DatabaseSession.ATTRIBUTES;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal.ATTRIBUTES_INTERNAL;
import com.jetbrains.youtrack.db.internal.core.metadata.security.Role;
import com.jetbrains.youtrack.db.internal.core.metadata.security.Rule;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

public class SQLAlterDatabaseStatement extends DDLStatement {
  SQLIdentifier settingName;
  SQLExpression settingValue;

  public SQLAlterDatabaseStatement(int id) {
    super(id);
  }

  public SQLAlterDatabaseStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    return ExecutionStream.singleton(executeSimpleAlter(settingName, settingValue, ctx));
  }

  private static Result executeSimpleAlter(
      SQLIdentifier settingName, SQLExpression settingValue, CommandContext ctx) {

    var db = ctx.getDatabase();
    Object oldValue;
    Object finalValue;
    try {
      var attribute =
          DatabaseSession.ATTRIBUTES.valueOf(
              settingName.getStringValue().toUpperCase(Locale.ENGLISH));

      db.checkSecurity(Rule.ResourceGeneric.DATABASE, Role.PERMISSION_UPDATE);

      oldValue = db.get(attribute);
      finalValue = settingValue.execute((Identifiable) null, ctx);
      db.setInternal(attribute, finalValue);
    } catch (IllegalArgumentException e) {
      var attributesInternal =
          DatabaseSessionInternal.ATTRIBUTES_INTERNAL.valueOf(
              settingName.getStringValue().toUpperCase(Locale.ENGLISH));
      db.checkSecurity(Rule.ResourceGeneric.DATABASE, Role.PERMISSION_UPDATE);

      oldValue = db.get(attributesInternal);
      finalValue = settingValue.execute((Identifiable) null, ctx);
      db.set(attributesInternal, finalValue);
    }

    var result = new ResultInternal(db);
    result.setProperty("operation", "alter database");
    result.setProperty("attribute", settingName.getStringValue());
    result.setProperty("oldValue", oldValue);
    result.setProperty("newValue", finalValue);

    return result;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("ALTER DATABASE ");

    settingName.toString(params, builder);
    builder.append(" ");
    settingValue.toString(params, builder);

  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("ALTER DATABASE ");

    settingName.toGenericStatement(builder);
    builder.append(" ");
    settingValue.toGenericStatement(builder);
  }

  @Override
  public SQLAlterDatabaseStatement copy() {
    var result = new SQLAlterDatabaseStatement(-1);
    result.settingName = settingName == null ? null : settingName.copy();
    result.settingValue = settingValue == null ? null : settingValue.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLAlterDatabaseStatement) o;

    if (!Objects.equals(settingName, that.settingName)) {
      return false;
    }
    return Objects.equals(settingValue, that.settingValue);
  }

  @Override
  public int hashCode() {
    var result = (settingName != null ? settingName.hashCode() : 0);
    result = 31 * result + (settingValue != null ? settingValue.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=8fec57db8dd2a3b52aaa52dec7367cd4 (do not edit this line) */

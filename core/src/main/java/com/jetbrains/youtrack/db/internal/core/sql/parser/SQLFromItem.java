/* Generated By:JJTree: Do not edit this line. SQLFromItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLFromItem extends SimpleNode {

  protected List<SQLRid> rids;
  protected List<SQLInputParameter> inputParams;
  protected SQLCluster cluster;
  protected SQLClusterList clusterList;
  protected SQLIndexIdentifier index;
  protected SQLMetadataIdentifier metadata;
  protected SQLStatement statement;
  protected SQLInputParameter inputParam;
  protected SQLIdentifier identifier;
  protected SQLFunctionCall functionCall;
  protected SQLModifier modifier;

  public SQLFromItem(int id) {
    super(id);
  }

  public SQLFromItem(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (rids != null && rids.size() > 0) {
      if (rids.size() == 1) {
        rids.get(0).toString(params, builder);
        return;
      } else {
        builder.append("[");
        var first = true;
        for (var rid : rids) {
          if (!first) {
            builder.append(", ");
          }
          rid.toString(params, builder);
          first = false;
        }
        builder.append("]");
        return;
      }
    } else if (inputParams != null && inputParams.size() > 0) {
      if (inputParams.size() == 1) {
        inputParams.get(0).toString(params, builder);
        return;
      } else {
        builder.append("[");
        var first = true;
        for (var rid : inputParams) {
          if (!first) {
            builder.append(", ");
          }
          rid.toString(params, builder);
          first = false;
        }
        builder.append("]");
        return;
      }
    } else if (cluster != null) {
      cluster.toString(params, builder);
      return;
      // } else if (className != null) {
      // return className.getValue();
    } else if (clusterList != null) {
      clusterList.toString(params, builder);
      return;
    } else if (metadata != null) {
      metadata.toString(params, builder);
      return;
    } else if (statement != null) {
      builder.append("(");
      statement.toString(params, builder);
      builder.append(")");
      return;
    } else if (index != null) {
      index.toString(params, builder);
      return;
    } else if (inputParam != null) {
      inputParam.toString(params, builder);
    } else if (functionCall != null) {
      functionCall.toString(params, builder);
    } else if (identifier != null) {
      identifier.toString(params, builder);
    }
    if (modifier != null) {
      modifier.toString(params, builder);
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    if (rids != null && rids.size() > 0) {
      if (rids.size() == 1) {
        rids.get(0).toGenericStatement(builder);
        return;
      } else {
        builder.append("[");
        var first = true;
        for (var rid : rids) {
          if (!first) {
            builder.append(", ");
          }
          rid.toGenericStatement(builder);
          first = false;
        }
        builder.append("]");
        return;
      }
    } else if (inputParams != null && inputParams.size() > 0) {
      if (inputParams.size() == 1) {
        inputParams.get(0).toGenericStatement(builder);
        return;
      } else {
        builder.append("[");
        var first = true;
        for (var rid : inputParams) {
          if (!first) {
            builder.append(", ");
          }
          rid.toGenericStatement(builder);
          first = false;
        }
        builder.append("]");
        return;
      }
    } else if (cluster != null) {
      cluster.toGenericStatement(builder);
      return;
    } else if (clusterList != null) {
      clusterList.toGenericStatement(builder);
      return;
    } else if (metadata != null) {
      metadata.toGenericStatement(builder);
      return;
    } else if (statement != null) {
      builder.append("(");
      statement.toGenericStatement(builder);
      builder.append(")");
      return;
    } else if (index != null) {
      index.toGenericStatement(builder);
      return;
    } else if (inputParam != null) {
      inputParam.toGenericStatement(builder);
    } else if (functionCall != null) {
      functionCall.toGenericStatement(builder);
    } else if (identifier != null) {
      identifier.toGenericStatement(builder);
    }
    if (modifier != null) {
      modifier.toGenericStatement(builder);
    }
  }

  public SQLIdentifier getIdentifier() {
    return identifier;
  }

  public List<SQLRid> getRids() {
    return rids;
  }

  public SQLCluster getCluster() {
    return cluster;
  }

  public SQLClusterList getClusterList() {
    return clusterList;
  }

  public SQLIndexIdentifier getIndex() {
    return index;
  }

  public SQLMetadataIdentifier getMetadata() {
    return metadata;
  }

  public SQLStatement getStatement() {
    return statement;
  }

  public SQLInputParameter getInputParam() {
    return inputParam;
  }

  public List<SQLInputParameter> getInputParams() {
    return inputParams;
  }

  public SQLFunctionCall getFunctionCall() {
    return functionCall;
  }

  public SQLModifier getModifier() {
    return modifier;
  }

  public SQLFromItem copy() {
    var result = new SQLFromItem(-1);
    if (rids != null) {
      result.rids = rids.stream().map(r -> r.copy()).collect(Collectors.toList());
    }
    if (inputParams != null) {
      result.inputParams = inputParams.stream().map(r -> r.copy()).collect(Collectors.toList());
    }
    result.cluster = cluster == null ? null : cluster.copy();
    result.clusterList = clusterList == null ? null : clusterList.copy();
    result.index = index == null ? null : index.copy();
    result.metadata = metadata == null ? null : metadata.copy();
    result.statement = statement == null ? null : statement.copy();
    result.inputParam = inputParam == null ? null : inputParam.copy();
    result.identifier = identifier == null ? null : identifier.copy();
    result.functionCall = functionCall == null ? null : functionCall.copy();
    result.modifier = modifier == null ? null : modifier.copy();

    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var oFromItem = (SQLFromItem) o;

    if (!Objects.equals(rids, oFromItem.rids)) {
      return false;
    }
    if (!Objects.equals(inputParams, oFromItem.inputParams)) {
      return false;
    }
    if (!Objects.equals(cluster, oFromItem.cluster)) {
      return false;
    }
    if (!Objects.equals(clusterList, oFromItem.clusterList)) {
      return false;
    }
    if (!Objects.equals(index, oFromItem.index)) {
      return false;
    }
    if (!Objects.equals(metadata, oFromItem.metadata)) {
      return false;
    }
    if (!Objects.equals(statement, oFromItem.statement)) {
      return false;
    }
    if (!Objects.equals(inputParam, oFromItem.inputParam)) {
      return false;
    }
    if (!Objects.equals(identifier, oFromItem.identifier)) {
      return false;
    }
    if (!Objects.equals(functionCall, oFromItem.functionCall)) {
      return false;
    }
    return Objects.equals(modifier, oFromItem.modifier);
  }

  @Override
  public int hashCode() {
    var result = rids != null ? rids.hashCode() : 0;
    result = 31 * result + (inputParams != null ? inputParams.hashCode() : 0);
    result = 31 * result + (cluster != null ? cluster.hashCode() : 0);
    result = 31 * result + (clusterList != null ? clusterList.hashCode() : 0);
    result = 31 * result + (index != null ? index.hashCode() : 0);
    result = 31 * result + (metadata != null ? metadata.hashCode() : 0);
    result = 31 * result + (statement != null ? statement.hashCode() : 0);
    result = 31 * result + (inputParam != null ? inputParam.hashCode() : 0);
    result = 31 * result + (identifier != null ? identifier.hashCode() : 0);
    result = 31 * result + (functionCall != null ? functionCall.hashCode() : 0);
    result = 31 * result + (modifier != null ? modifier.hashCode() : 0);
    return result;
  }

  public void setRids(List<SQLRid> rids) {
    this.rids = rids;
  }

  public void setCluster(SQLCluster cluster) {
    this.cluster = cluster;
  }

  public void setClusterList(SQLClusterList clusterList) {
    this.clusterList = clusterList;
  }

  public void setIndex(SQLIndexIdentifier index) {
    this.index = index;
  }

  public void setMetadata(SQLMetadataIdentifier metadata) {
    this.metadata = metadata;
  }

  public void setStatement(SQLStatement statement) {
    this.statement = statement;
  }

  public void setInputParam(SQLInputParameter inputParam) {
    this.inputParam = inputParam;
  }

  public void setIdentifier(SQLIdentifier identifier) {
    this.identifier = identifier;
  }

  public void setFunctionCall(SQLFunctionCall functionCall) {
    this.functionCall = functionCall;
  }

  public void setModifier(SQLModifier modifier) {
    this.modifier = modifier;
  }

  public void setInputParams(List<SQLInputParameter> inputParams) {
    this.inputParams = inputParams;
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    if (rids != null) {
      result.setProperty(
          "rids", rids.stream().map(x -> x.serialize(db)).collect(Collectors.toList()));
    }
    if (inputParams != null) {
      result.setProperty(
          "inputParams", rids.stream().map(x -> x.serialize(db)).collect(Collectors.toList()));
    }
    if (cluster != null) {
      result.setProperty("cluster", cluster.serialize(db));
    }
    if (clusterList != null) {
      result.setProperty("clusterList", clusterList.serialize(db));
    }
    if (index != null) {
      result.setProperty("index", index.serialize(db));
    }
    if (metadata != null) {
      result.setProperty("metadata", metadata.serialize(db));
    }
    if (statement != null) {
      result.setProperty("statement", statement.serialize(db));
    }
    if (inputParam != null) {
      result.setProperty("inputParam", inputParam.serialize(db));
    }
    if (identifier != null) {
      result.setProperty("identifier", identifier.serialize(db));
    }
    if (functionCall != null) {
      result.setProperty("functionCall", functionCall.serialize(db));
    }
    if (modifier != null) {
      result.setProperty("modifier", modifier.serialize(db));
    }

    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("rids") != null) {
      List<Result> serRids = fromResult.getProperty("rids");
      rids = new ArrayList<>();
      for (var res : serRids) {
        var rid = new SQLRid(-1);
        rid.deserialize(res);
        rids.add(rid);
      }
    }

    if (fromResult.getProperty("inputParams") != null) {
      List<Result> ser = fromResult.getProperty("inputParams");
      inputParams = new ArrayList<>();
      for (var res : ser) {
        inputParams.add(SQLInputParameter.deserializeFromOResult(res));
      }
    }

    if (fromResult.getProperty("cluster") != null) {
      cluster = new SQLCluster(-1);
      cluster.deserialize(fromResult.getProperty("cluster"));
    }
    if (fromResult.getProperty("clusterList") != null) {
      clusterList = new SQLClusterList(-1);
      clusterList.deserialize(fromResult.getProperty("clusterList"));
    }

    if (fromResult.getProperty("index") != null) {
      index = new SQLIndexIdentifier(-1);
      index.deserialize(fromResult.getProperty("index"));
    }
    if (fromResult.getProperty("metadata") != null) {
      metadata = new SQLMetadataIdentifier(-1);
      metadata.deserialize(fromResult.getProperty("metadata"));
    }
    if (fromResult.getProperty("statement") != null) {
      statement = SQLStatement.deserializeFromOResult(fromResult.getProperty("statement"));
    }
    if (fromResult.getProperty("inputParam") != null) {
      inputParam = SQLInputParameter.deserializeFromOResult(fromResult.getProperty("inputParam"));
    }
    if (fromResult.getProperty("identifier") != null) {
      identifier = SQLIdentifier.deserialize(fromResult.getProperty("identifier"));
    }
    if (fromResult.getProperty("functionCall") != null) {
      functionCall = new SQLFunctionCall(-1);
      functionCall.deserialize(fromResult.getProperty("functionCall"));
    }
    if (fromResult.getProperty("modifier") != null) {
      modifier = new SQLModifier(-1);
      modifier.deserialize(fromResult.getProperty("modifier"));
    }
  }

  public boolean isCacheable(DatabaseSessionInternal session) {
    if (modifier != null) {
      return false;
    }
    if (inputParam != null) {
      return false;
    }
    if (inputParams != null && !inputParams.isEmpty()) {
      return false;
    }
    if (statement != null) {
      return statement.executinPlanCanBeCached(session);
    }
    if (functionCall != null) {
      return functionCall.isCacheable();
    }

    return true;
  }

  public boolean refersToParent() {
    if (modifier != null && modifier.refersToParent()) {
      return true;
    }
    if (statement != null && statement.refersToParent()) {
      return true;
    }
    return functionCall != null && functionCall.refersToParent();
  }

  public void addRid(SQLRid rid) {
    this.rids.add(rid);
  }

  public void addInputParam(SQLInputParameter par) {
    this.inputParams.add(par);
  }
}
/* JavaCC - OriginalChecksum=f64e3b4d2a2627a1b5d04a7dcb95fa94 (do not edit this line) */

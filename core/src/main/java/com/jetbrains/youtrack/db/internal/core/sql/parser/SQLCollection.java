/* Generated By:JJTree: Do not edit this line. SQLCollection.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.api.query.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class SQLCollection extends SimpleNode {

  protected List<SQLExpression> expressions = new ArrayList<SQLExpression>();

  public SQLCollection(int id) {
    super(id);
  }

  public SQLCollection(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("[");
    var first = true;
    for (var expr : expressions) {
      if (!first) {
        builder.append(", ");
      }
      expr.toString(params, builder);
      first = false;
    }
    builder.append("]");
  }

  public void toGenericStatement(StringBuilder builder) {
    builder.append("[");
    var first = true;
    for (var expr : expressions) {
      if (!first) {
        builder.append(", ");
      }
      expr.toGenericStatement(builder);
      first = false;
    }
    builder.append("]");
  }

  public void add(SQLExpression exp) {
    this.expressions.add(exp);
  }

  public Object execute(Identifiable iCurrentRecord, CommandContext ctx) {
    List<Object> result = new ArrayList<Object>();
    for (var exp : expressions) {
      result.add(exp.execute(iCurrentRecord, ctx));
    }
    return result;
  }

  public Object execute(Result iCurrentRecord, CommandContext ctx) {
    List<Object> result = new ArrayList<Object>();
    for (var exp : expressions) {
      result.add(convert(exp.execute(iCurrentRecord, ctx)));
    }
    return result;
  }

  private Object convert(Object item) {
    if (item instanceof ResultSet) {
      return ((ResultSet) item).stream().collect(Collectors.toList());
    }
    return item;
  }

  public boolean needsAliases(Set<String> aliases) {
    for (var expr : this.expressions) {
      if (expr.needsAliases(aliases)) {
        return true;
      }
    }
    return false;
  }

  public boolean isAggregate(DatabaseSessionInternal session) {
    for (var exp : this.expressions) {
      if (exp.isAggregate(session)) {
        return true;
      }
    }
    return false;
  }

  public SQLCollection splitForAggregation(
      AggregateProjectionSplit aggregateProj, CommandContext ctx) {
    var db = ctx.getDatabase();
    if (isAggregate(db)) {
      var result = new SQLCollection(-1);
      for (var exp : this.expressions) {
        if (exp.isAggregate(db) || exp.isEarlyCalculated(ctx)) {
          result.expressions.add(exp.splitForAggregation(aggregateProj, ctx));
        } else {
          throw new CommandExecutionException(
              "Cannot mix aggregate and non-aggregate operations in a collection: " + this);
        }
      }
      return result;
    } else {
      return this;
    }
  }

  public boolean isEarlyCalculated(CommandContext ctx) {
    for (var exp : expressions) {
      if (!exp.isEarlyCalculated(ctx)) {
        return false;
      }
    }
    return true;
  }

  public SQLCollection copy() {
    var result = new SQLCollection(-1);
    result.expressions =
        expressions == null
            ? null
            : expressions.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLCollection) o;

    return Objects.equals(expressions, that.expressions);
  }

  @Override
  public int hashCode() {
    return expressions != null ? expressions.hashCode() : 0;
  }

  public boolean refersToParent() {
    if (expressions != null) {
      for (var exp : expressions) {
        if (exp != null && exp.refersToParent()) {
          return true;
        }
      }
    }
    return false;
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    if (expressions != null) {
      result.setProperty(
          "expressions",
          expressions.stream().map(x -> x.serialize(db)).collect(Collectors.toList()));
    }
    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("expressions") != null) {
      expressions = new ArrayList<>();
      List<Result> ser = fromResult.getProperty("expressions");
      for (var item : ser) {
        var exp = new SQLExpression(-1);
        exp.deserialize(item);
        expressions.add(exp);
      }
    }
  }

  public boolean isCacheable(DatabaseSessionInternal session) {
    for (var exp : expressions) {
      if (!exp.isCacheable(session)) {
        return false;
      }
    }
    return true;
  }

  public List<SQLExpression> getExpressions() {
    return expressions;
  }
}
/* JavaCC - OriginalChecksum=c93b20138b2ae58c5f76e458c34b5946 (do not edit this line) */

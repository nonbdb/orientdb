/* Generated By:JJTree: Do not edit this line. SQLAlterClassStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.BaseException;
import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.schema.SchemaClass;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.index.Index;
import com.jetbrains.youtrack.db.internal.core.metadata.schema.SchemaClassInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class SQLAlterClassStatement extends DDLStatement {

  /**
   * the name of the class
   */
  protected SQLIdentifier name;

  /**
   * the class property to be altered
   */
  public SchemaClass.ATTRIBUTES property;

  protected SQLIdentifier identifierValue;
  protected List<SQLIdentifier> identifierListValue;
  protected Boolean add;
  protected Boolean remove;
  protected SQLNumber numberValue;
  protected Boolean booleanValue;
  public SQLIdentifier customKey;
  public SQLExpression customValue;

  // only to manage 'round-robin' as a cluster selection strategy (not a valid identifier)
  protected String customString;

  protected boolean unsafe;

  public SQLAlterClassStatement(int id) {
    super(id);
  }

  public SQLAlterClassStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void addIdentifierListValue(SQLIdentifier id) {
    if (this.identifierListValue == null) {
      this.identifierListValue = new ArrayList<>();
    }
    this.identifierListValue.add(id);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("ALTER CLASS ");
    name.toString(params, builder);
    if (property != null) {
      builder.append(" " + property.name() + " ");
      switch (property) {
        case NAME:
        case SHORTNAME:
        case ADD_CLUSTER:
        case REMOVE_CLUSTER:
        case DESCRIPTION:
        case CLUSTER_SELECTION:
          if (identifierValue != null) {
            identifierValue.toString(params, builder);
          } else if (customString != null) {
            builder.append('\'').append(customString).append('\'');
          } else {
            builder.append("null");
          }
          break;
        case SUPERCLASS:
          if (Boolean.TRUE.equals(add)) {
            builder.append("+");
          } else if (Boolean.TRUE.equals(remove)) {
            builder.append("-");
          }
          if (identifierValue == null) {
            builder.append("null");
          } else {
            identifierValue.toString(params, builder);
          }
          break;
        case SUPERCLASSES:
          if (identifierListValue == null) {
            builder.append("null");
          } else {
            var first = true;
            for (var ident : identifierListValue) {
              if (!first) {
                builder.append(", ");
              }
              ident.toString(params, builder);
              first = false;
            }
          }
          break;
        case STRICT_MODE:
        case ABSTRACT:
          builder.append(booleanValue.booleanValue());
          break;
        case CUSTOM:
          customKey.toString(params, builder);
          builder.append("=");
          if (customValue == null) {
            builder.append("null");
          } else {
            customValue.toString(params, builder);
          }
          break;
      }
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("ALTER CLASS ");
    name.toGenericStatement(builder);
    if (property != null) {
      builder.append(" " + property.name() + " ");
      switch (property) {
        case NAME:
        case SHORTNAME:
        case ADD_CLUSTER:
        case REMOVE_CLUSTER:
        case DESCRIPTION:
        case CLUSTER_SELECTION:
          if (identifierValue != null) {
            identifierValue.toGenericStatement(builder);
          } else {
            builder.append(PARAMETER_PLACEHOLDER);
          }
          break;
        case SUPERCLASS:
          if (Boolean.TRUE.equals(add)) {
            builder.append("+");
          } else if (Boolean.TRUE.equals(remove)) {
            builder.append("-");
          }
          if (identifierValue == null) {
            builder.append(PARAMETER_PLACEHOLDER);
          } else {
            identifierValue.toGenericStatement(builder);
          }
          break;
        case SUPERCLASSES:
          if (identifierListValue == null) {
            builder.append(PARAMETER_PLACEHOLDER);
          } else {
            var first = true;
            for (var ident : identifierListValue) {
              if (!first) {
                builder.append(", ");
              }
              ident.toGenericStatement(builder);
              first = false;
            }
          }
          break;
        case STRICT_MODE:
        case ABSTRACT:
          builder.append(booleanValue.booleanValue());
          break;
        case CUSTOM:
          customKey.toGenericStatement(builder);
          builder.append("=");
          if (customValue == null) {
            builder.append("null");
          } else {
            customValue.toGenericStatement(builder);
          }
          break;
      }
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  public SQLStatement copy() {
    var result = new SQLAlterClassStatement(-1);
    result.name = name == null ? null : name.copy();
    result.property = property;
    result.identifierValue = identifierValue == null ? null : identifierValue.copy();
    result.identifierListValue =
        identifierListValue == null
            ? null
            : identifierListValue.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.add = add;
    result.remove = remove;
    result.numberValue = numberValue == null ? null : numberValue.copy();
    result.booleanValue = booleanValue;
    result.customKey = customKey == null ? null : customKey.copy();
    result.customValue = customValue == null ? null : customValue.copy();
    result.customString = customString;
    result.unsafe = unsafe;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLAlterClassStatement) o;

    if (unsafe != that.unsafe) {
      return false;
    }
    if (!Objects.equals(name, that.name)) {
      return false;
    }
    if (property != that.property) {
      return false;
    }
    if (!Objects.equals(identifierValue, that.identifierValue)) {
      return false;
    }
    if (!Objects.equals(identifierListValue, that.identifierListValue)) {
      return false;
    }
    if (!Objects.equals(add, that.add)) {
      return false;
    }
    if (!Objects.equals(remove, that.remove)) {
      return false;
    }
    if (!Objects.equals(numberValue, that.numberValue)) {
      return false;
    }
    if (!Objects.equals(booleanValue, that.booleanValue)) {
      return false;
    }
    if (!Objects.equals(customKey, that.customKey)) {
      return false;
    }
    if (!Objects.equals(customValue, that.customValue)) {
      return false;
    }
    return Objects.equals(customString, that.customString);
  }

  @Override
  public int hashCode() {
    var result = name != null ? name.hashCode() : 0;
    result = 31 * result + (property != null ? property.hashCode() : 0);
    result = 31 * result + (identifierValue != null ? identifierValue.hashCode() : 0);
    result = 31 * result + (identifierListValue != null ? identifierListValue.hashCode() : 0);
    result = 31 * result + (add != null ? add.hashCode() : 0);
    result = 31 * result + (remove != null ? remove.hashCode() : 0);
    result = 31 * result + (numberValue != null ? numberValue.hashCode() : 0);
    result = 31 * result + (booleanValue != null ? booleanValue.hashCode() : 0);
    result = 31 * result + (customKey != null ? customKey.hashCode() : 0);
    result = 31 * result + (customValue != null ? customValue.hashCode() : 0);
    result = 31 * result + (customString != null ? customString.hashCode() : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    return result;
  }

  @Override
  public ExecutionStream executeDDL(CommandContext ctx) {
    var database = ctx.getDatabase();
    var oClass = database.getMetadata().getSchemaInternal()
        .getClassInternal(name.getStringValue());
    if (oClass == null) {
      throw new CommandExecutionException("Class not found: " + name);
    }
    if (property != null) {
      switch (property) {
        case NAME:
          if (!unsafe) {
            checkNotEdge(oClass);
            checkNotIndexed(database, oClass);
          }
          try {
            oClass.setName(database, identifierValue.getStringValue());
          } catch (Exception e) {
            var x =
                BaseException.wrapException(
                    new CommandExecutionException("Invalid class name: " + this), e);
            throw x;
          }
          break;
        case SHORTNAME:
          if (identifierValue != null) {
            try {
              oClass.setShortName(database, identifierValue.getStringValue());
            } catch (Exception e) {
              var x =
                  BaseException.wrapException(
                      new CommandExecutionException("Invalid class name: " + this), e);
              throw x;
            }
          } else {
            throw new CommandExecutionException("Invalid class name: " + this);
          }
          break;
        case ADD_CLUSTER:
          if (identifierValue != null) {
            oClass.addCluster(database, identifierValue.getStringValue());
          } else if (numberValue != null) {
            oClass.addClusterId(database, numberValue.getValue().intValue());
          } else {
            throw new CommandExecutionException("Invalid cluster value: " + this);
          }
          break;
        case REMOVE_CLUSTER:
          var clusterId = -1;
          if (identifierValue != null) {
            clusterId = ctx.getDatabase().getClusterIdByName(identifierValue.getStringValue());
            if (clusterId < 0) {
              throw new CommandExecutionException("Cluster not found: " + this);
            }
          } else if (numberValue != null) {
            clusterId = numberValue.getValue().intValue();
          } else {
            throw new CommandExecutionException("Invalid cluster value: " + this);
          }
          oClass.removeClusterId(database, clusterId);
          break;
        case DESCRIPTION:
          if (identifierValue != null) {
            oClass.setDescription(database, identifierValue.getStringValue());
          } else {
            throw new CommandExecutionException("Invalid class name: " + this);
          }
          break;
        case CLUSTER_SELECTION:
          if (identifierValue != null) {
            oClass.setClusterSelection(database, identifierValue.getStringValue());
          } else if (customString != null) {
            oClass.setClusterSelection(database, customString);
          } else {
            oClass.setClusterSelection(database, "null");
          }
          break;
        case SUPERCLASS:
          doSetSuperclass(ctx, oClass, identifierValue);
          break;
        case SUPERCLASSES:
          if (identifierListValue == null) {
            oClass.setSuperClasses(database, Collections.EMPTY_LIST);
          } else {
            doSetSuperclasses(ctx, oClass, identifierListValue);
          }
          break;
        case STRICT_MODE:
          oClass.setStrictMode(database, booleanValue.booleanValue());
          break;
        case ABSTRACT:
          oClass.setAbstract(database, booleanValue.booleanValue());
          break;
        case CUSTOM:
          Object value = null;
          if (customValue != null) {
            value = customValue.execute((Identifiable) null, ctx);
          }
          if (value != null) {
            value = "" + value;
          }
          oClass.setCustom(database, customKey.getStringValue(), (String) value);
          break;
      }
    }

    var result = new ResultInternal(database);
    result.setProperty("operation", "ALTER CLASS");
    result.setProperty("className", name.getStringValue());
    result.setProperty("result", "OK");
    return ExecutionStream.singleton(result);
  }

  private void checkNotIndexed(DatabaseSessionInternal session, SchemaClassInternal oClass) {
    var indexes = oClass.getIndexesInternal(session);
    if (indexes != null && indexes.size() > 0) {
      throw new CommandExecutionException(
          "Cannot rename class '"
              + oClass.getName()
              + "' because it has indexes defined on it. Drop indexes before or use UNSAFE (at your"
              + " won risk)");
    }
  }

  private void checkNotEdge(SchemaClass oClass) {
    if (oClass.isSubClassOf("E")) {
      throw new CommandExecutionException(
          "Cannot alter class '"
              + oClass
              + "' because is an Edge class and could break vertices. Use UNSAFE if you want to"
              + " force it");
    }
  }

  private void doSetSuperclass(CommandContext ctx, SchemaClass oClass,
      SQLIdentifier superclassName) {
    if (superclassName == null) {
      throw new CommandExecutionException("Invalid superclass name: " + this);
    }
    var database = ctx.getDatabase();
    var superclass =
        database.getMetadata().getSchema().getClass(superclassName.getStringValue());
    if (superclass == null) {
      throw new CommandExecutionException("superclass not found: " + this);
    }
    if (Boolean.TRUE.equals(add)) {
      oClass.addSuperClass(database, superclass);
    } else if (Boolean.TRUE.equals(remove)) {
      oClass.removeSuperClass(database, superclass);
    } else {
      oClass.setSuperClasses(database, Collections.singletonList(superclass));
    }
  }

  private void doSetSuperclasses(
      CommandContext ctx, SchemaClass oClass, List<SQLIdentifier> superclassNames) {
    var database = ctx.getDatabase();
    if (superclassNames == null) {
      throw new CommandExecutionException("Invalid superclass name: " + this);
    }
    List<SchemaClass> superclasses = new ArrayList<>();
    for (var superclassName : superclassNames) {
      var superclass =
          ctx.getDatabase().getMetadata().getSchema().getClass(superclassName.getStringValue());
      if (superclass == null) {
        throw new CommandExecutionException("superclass not found: " + this);
      }
      superclasses.add(superclass);
    }
    if (Boolean.TRUE.equals(add)) {
      for (var superclass : superclasses) {
        oClass.addSuperClass(database, superclass);
      }
    } else if (Boolean.TRUE.equals(remove)) {
      for (var superclass : superclasses) {
        oClass.removeSuperClass(database, superclass);
      }
    } else {
      oClass.setSuperClasses(database, superclasses);
    }
  }
}
/* JavaCC - OriginalChecksum=4668bb1cd336844052df941f39bdb634 (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLExpressionStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.Map;
import java.util.Objects;

public class SQLExpressionStatement extends SQLSimpleExecStatement {

  protected SQLExpression expression;

  public SQLExpressionStatement(int id) {
    super(id);
  }

  public SQLExpressionStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ExecutionStream executeSimple(CommandContext ctx) {
    var db = ctx.getDatabase();
    var expResult = expression.execute(new ResultInternal(db), ctx);
    var item = new ResultInternal(db);
    item.setProperty("result", expResult);
    return ExecutionStream.singleton(item);
  }

  @Override
  public boolean executinPlanCanBeCached(DatabaseSessionInternal session) {
    return false;
  }

  @Override
  public SQLStatement copy() {
    var result = new SQLExpressionStatement(-1);
    result.expression = expression.copy();
    return result;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    expression.toString(params, builder);
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    expression.toGenericStatement(builder);
  }

  @Override
  public boolean refersToParent() {
    return expression.refersToParent();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    var that = (SQLExpressionStatement) o;
    return Objects.equals(expression, that.expression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expression);
  }
}
/* JavaCC - OriginalChecksum=c3eda193cdcf863b4ced490ef1f37734 (do not edit this line) */

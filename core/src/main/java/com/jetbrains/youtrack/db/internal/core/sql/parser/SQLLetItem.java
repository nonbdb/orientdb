/* Generated By:JJTree: Do not edit this line. SQLLetItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.Map;
import java.util.Objects;

public class SQLLetItem extends SimpleNode {

  protected SQLIdentifier varName;
  protected SQLExpression expression;
  protected SQLStatement query;

  public SQLLetItem(int id) {
    super(id);
  }

  public SQLLetItem(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    varName.toString(params, builder);
    builder.append(" = ");
    if (expression != null) {
      expression.toString(params, builder);
    } else if (query != null) {
      builder.append("(");
      query.toString(params, builder);
      builder.append(")");
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    varName.toGenericStatement(builder);
    builder.append(" = ");
    if (expression != null) {
      expression.toGenericStatement(builder);
    } else if (query != null) {
      builder.append("(");
      query.toGenericStatement(builder);
      builder.append(")");
    }
  }

  public SQLLetItem copy() {
    var result = new SQLLetItem(-1);
    result.varName = varName.copy();
    result.expression = expression == null ? null : expression.copy();
    result.query = query == null ? null : query.copy();
    return result;
  }

  public void setVarName(SQLIdentifier varName) {
    this.varName = varName;
  }

  public void setExpression(SQLExpression expression) {
    this.expression = expression;
  }

  public void setQuery(SQLStatement query) {
    this.query = query;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var oLetItem = (SQLLetItem) o;

    if (!Objects.equals(varName, oLetItem.varName)) {
      return false;
    }
    if (!Objects.equals(expression, oLetItem.expression)) {
      return false;
    }
    return Objects.equals(query, oLetItem.query);
  }

  @Override
  public int hashCode() {
    var result = varName != null ? varName.hashCode() : 0;
    result = 31 * result + (expression != null ? expression.hashCode() : 0);
    result = 31 * result + (query != null ? query.hashCode() : 0);
    return result;
  }

  public boolean refersToParent() {
    if (expression != null && expression.refersToParent()) {
      return true;
    }
    return query != null && query.refersToParent();
  }

  public SQLIdentifier getVarName() {
    return varName;
  }

  public SQLExpression getExpression() {
    return expression;
  }

  public SQLStatement getQuery() {
    return query;
  }

  public void extractSubQueries(SubQueryCollector collector) {
    // this is to transform LET expressions with subqueries in simple LET, plus LET with query only,
    // so the direct query is ignored
    if (expression != null) {
      expression.extractSubQueries(varName, collector);
    }
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    if (varName != null) {
      result.setProperty("varName", varName.serialize(db));
    }
    if (expression != null) {
      result.setProperty("expression", expression.serialize(db));
    }
    if (query != null) {
      result.setProperty("query", query.serialize(db));
    }

    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("varName") != null) {
      varName = SQLIdentifier.deserialize(fromResult.getProperty("varName"));
    }
    if (fromResult.getProperty("expression") != null) {
      expression = new SQLExpression(-1);
      expression.deserialize(fromResult.getProperty("expression"));
    }
    if (fromResult.getProperty("query") != null) {
      query = SQLStatement.deserializeFromOResult(fromResult.getProperty("expression"));
    }
  }

  public boolean isCacheable(DatabaseSessionInternal session) {
    if (expression != null) {
      return expression.isCacheable(session);
    }
    return true;
  }
}
/* JavaCC - OriginalChecksum=bb3cd298d79f50d72f6842e6d6ea4fb2 (do not edit this line) */

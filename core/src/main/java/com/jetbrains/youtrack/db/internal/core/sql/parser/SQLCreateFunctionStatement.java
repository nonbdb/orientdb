/* Generated By:JJTree: Do not edit this line. SQLCreateFunctionStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.record.RID;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.metadata.function.Function;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.ExecutionStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class SQLCreateFunctionStatement extends SQLSimpleExecStatement {

  protected SQLIdentifier name;
  protected String codeQuoted;
  protected String code;

  protected List<SQLIdentifier> parameters;
  protected Boolean idempotent;
  protected SQLIdentifier language;

  public SQLCreateFunctionStatement(int id) {
    super(id);
  }

  public SQLCreateFunctionStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void addParameter(SQLIdentifier parameter) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parameter);
  }

  @Override
  public ExecutionStream executeSimple(CommandContext ctx) {
    var database = ctx.getDatabase();
    final var f =
        database.getMetadata().getFunctionLibrary().createFunction(name.getStringValue());
    f.setCode(code);
    f.setIdempotent(Boolean.TRUE.equals(idempotent));
    if (parameters != null) {
      f.setParameters(
          parameters.stream().map(x -> x.getStringValue()).collect(Collectors.toList()));
    }
    if (language != null) {
      f.setLanguage(language.getStringValue());
    }
    f.save(database);
    var functionId = f.getIdentity();
    var result = new ResultInternal(database);
    result.setProperty("operation", "create function");
    result.setProperty("functionName", name.getStringValue());
    result.setProperty("finalId", functionId);

    return ExecutionStream.singleton(result);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE FUNCTION ");
    name.toString(params, builder);
    builder.append(" ");
    builder.append(codeQuoted);
    if (parameters != null) {
      var first = true;
      builder.append(" PARAMETERS [");
      for (var param : parameters) {
        if (!first) {
          builder.append(", ");
        }
        param.toString(params, builder);
        first = false;
      }
      builder.append("]");
    }
    if (idempotent != null) {
      builder.append(" IDEMPOTENT ");
      builder.append(idempotent ? "true" : "false");
    }
    if (language != null) {
      builder.append(" LANGUAGE ");
      language.toString(params, builder);
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("CREATE FUNCTION ");
    name.toGenericStatement(builder);
    builder.append(" ");
    builder.append(codeQuoted);
    if (parameters != null) {
      var first = true;
      builder.append(" PARAMETERS [");
      for (var param : parameters) {
        if (!first) {
          builder.append(", ");
        }
        param.toGenericStatement(builder);
        first = false;
      }
      builder.append("]");
    }
    if (idempotent != null) {
      builder.append(" IDEMPOTENT ");
      builder.append(idempotent ? "true" : "false");
    }
    if (language != null) {
      builder.append(" LANGUAGE ");
      language.toGenericStatement(builder);
    }
  }

  @Override
  public SQLCreateFunctionStatement copy() {
    var result = new SQLCreateFunctionStatement(-1);
    result.name = name == null ? null : name.copy();
    result.codeQuoted = codeQuoted;
    result.code = code;
    result.parameters =
        parameters == null
            ? null
            : parameters.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.idempotent = idempotent;
    result.language = language == null ? null : language.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLCreateFunctionStatement) o;

    if (!Objects.equals(name, that.name)) {
      return false;
    }
    if (!Objects.equals(codeQuoted, that.codeQuoted)) {
      return false;
    }
    if (!Objects.equals(code, that.code)) {
      return false;
    }
    if (!Objects.equals(parameters, that.parameters)) {
      return false;
    }
    if (!Objects.equals(idempotent, that.idempotent)) {
      return false;
    }
    return Objects.equals(language, that.language);
  }

  @Override
  public int hashCode() {
    var result = name != null ? name.hashCode() : 0;
    result = 31 * result + (codeQuoted != null ? codeQuoted.hashCode() : 0);
    result = 31 * result + (code != null ? code.hashCode() : 0);
    result = 31 * result + (parameters != null ? parameters.hashCode() : 0);
    result = 31 * result + (idempotent != null ? idempotent.hashCode() : 0);
    result = 31 * result + (language != null ? language.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=bbc914f66e96822dedc7e89e14240872 (do not edit this line) */

package com.jetbrains.youtrack.db.auto;

import static org.testng.AssertJUnit.assertEquals;
import static org.testng.AssertJUnit.assertNotNull;
import static org.testng.AssertJUnit.assertNull;

import com.jetbrains.youtrack.db.api.DatabaseSession;
import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.api.record.DBRecord;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.record.RID;
import com.jetbrains.youtrack.db.api.schema.PropertyType;
import com.jetbrains.youtrack.db.api.schema.Schema;
import com.jetbrains.youtrack.db.api.schema.SchemaClass;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseDocumentTx;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.id.RecordId;
import com.jetbrains.youtrack.db.internal.core.index.CompositeKey;
import com.jetbrains.youtrack.db.internal.core.index.Index;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import java.util.Date;
import java.util.Set;
import java.util.stream.Stream;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * @since 3/3/2015
 */
public class DefaultValuesTrivialTest {

  private static final int DOCUMENT_COUNT = 50;

  private DatabaseSessionInternal db;

  @BeforeMethod
  public void before() {
    //noinspection deprecation
    db = new DatabaseDocumentTx("memory:" + DefaultValuesTrivialTest.class.getSimpleName());
    //noinspection deprecation
    db.create();
  }

  @AfterMethod
  public void after() {
    //noinspection deprecation
    db.drop();
  }

  @Test
  public void test() {

    // create example schema
    Schema schema = db.getMetadata().getSchema();
    SchemaClass classPerson = schema.createClass("Person");

    classPerson.createProperty(db, "name", PropertyType.STRING);
    classPerson.createProperty(db, "join_date", PropertyType.DATETIME)
        .setDefaultValue(db, "sysdate()");
    classPerson.createProperty(db, "active", PropertyType.BOOLEAN)
        .setDefaultValue(db, "true");

    Date dtStart = getDatabaseSysdate(db);

    EntityImpl[] docs = new EntityImpl[DOCUMENT_COUNT];
    for (int i = 0; i < DOCUMENT_COUNT; ++i) {
      db.begin();
      EntityImpl doc = ((EntityImpl) db.newEntity("Person"));
      doc.field("name", "autoGeneratedName #" + i);
      doc.save();
      db.commit();

      docs[i] = doc;
    }

    Date dtAfter = getDatabaseSysdate(db);
    for (int i = 0; i < DOCUMENT_COUNT; ++i) {
      final EntityImpl doc = docs[i];

      try {
        //
        Date dt = doc.field("join_date", PropertyType.DATETIME);

        boolean isInRange = (!dt.before(dtStart)) && (!dt.after(dtAfter));
        Assert.assertTrue(isInRange);

        //
        boolean active = doc.field("active", PropertyType.BOOLEAN);
        Assert.assertTrue(active);
      } catch (Exception ex) {
        ex.printStackTrace();
        Assert.fail();
      }
    }
  }

  private static Date getDatabaseSysdate(DatabaseSession database) {
    try (ResultSet dates = database.query("SELECT sysdate() as sysdate")) {
      return dates.next().getProperty("sysdate");
    }
  }

  @Test
  public void testDefaultValueConversion() {
    Schema schema = db.getMetadata().getSchema();
    SchemaClass classPerson = schema.createClass("Person");
    classPerson.createProperty(db, "users", PropertyType.LINKSET)
        .setDefaultValue(db, "[#5:1]");

    EntityImpl doc = ((EntityImpl) db.newEntity("Person"));

    db.begin();
    DBRecord record = db.save(doc);
    db.commit();

    EntityImpl doc1 = db.load(record.getIdentity());
    Set<Identifiable> rids = doc1.field("users");
    assertEquals(rids.size(), 1);
    assertEquals(rids.iterator().next(), new RecordId(5, 1));
  }

  @Test
  public void testPrepopulation() {
    // create example schema
    Schema schema = db.getMetadata().getSchema();
    SchemaClass classA = schema.createClass("ClassA");

    classA.createProperty(db, "name", PropertyType.STRING)
        .setDefaultValue(db, "default name");
    classA.createProperty(db, "date", PropertyType.DATETIME)
        .setDefaultValue(db, "sysdate()");
    classA.createProperty(db, "active", PropertyType.BOOLEAN)
        .setDefaultValue(db, "true");

    {
      EntityImpl doc = ((EntityImpl) db.newEntity(classA));
      assertEquals("default name", doc.field("name"));
      assertNotNull(doc.field("date"));
      assertEquals((Boolean) true, doc.field("active"));
    }

    {
      EntityImpl doc = ((EntityImpl) db.newEntity(classA.getName()));
      assertNull(doc.field("name"));
      assertNull(doc.field("date"));
      assertNull(doc.field("active"));
      assertEquals("default name", doc.field("name"));
      assertNotNull(doc.field("date"));
      assertEquals((Boolean) true, doc.field("active"));
    }

    {
      EntityImpl doc = ((EntityImpl) db.newEntity());
      assertNull(doc.field("name"));
      assertNull(doc.field("date"));
      assertNull(doc.field("active"));
      doc.setClassNameIfExists(classA.getName());
      assertEquals("default name", doc.field("name"));
      assertNotNull(doc.field("date"));
      assertEquals((Boolean) true, doc.field("active"));
    }
  }

  @Test
  public void testPrepopulationIndex() {
    // create example schema
    Schema schema = db.getMetadata().getSchema();
    SchemaClass classA = schema.createClass("ClassA");

    var prop = classA.createProperty(db, "name", PropertyType.STRING);
    prop.setDefaultValue(db, "default name");
    prop.createIndex(db, SchemaClass.INDEX_TYPE.NOTUNIQUE);

    {
      EntityImpl doc = ((EntityImpl) db.newEntity(classA));
      assertEquals("default name", doc.field("name"));
      db.begin();
      db.save(doc);
      db.commit();
      try (Stream<RID> stream = db.getIndex("ClassA.name").getInternal()
          .getRids(db, "default name")) {
        assertEquals(1, stream.count());
      }
    }
  }

  @Test
  public void testPrepopulationIndexTx() {

    // create example schema
    Schema schema = db.getMetadata().getSchema();
    SchemaClass classA = schema.createClass("ClassA");

    var prop = classA.createProperty(db, "name", PropertyType.STRING);
    prop.setDefaultValue(db, "default name");
    prop.createIndex(db, SchemaClass.INDEX_TYPE.NOTUNIQUE);

    {
      db.begin();
      EntityImpl doc = ((EntityImpl) db.newEntity(classA));
      assertEquals("default name", doc.field("name"));

      db.begin();
      db.save(doc);
      db.commit();

      var index = db.getIndex("ClassA.name");
      try (Stream<RID> stream = index.getInternal()
          .getRids(db, "default name")) {
        assertEquals(1, stream.count());
      }
      db.commit();

      index = db.getIndex("ClassA.name");
      try (Stream<RID> stream = index.getInternal().getRids(db, "default name")) {
        assertEquals(1, stream.count());
      }
    }
  }

  @Test
  public void testPrepopulationMultivalueIndex() {

    // create example schema
    Schema schema = db.getMetadata().getSchema();
    SchemaClass classA = schema.createClass("ClassA");

    var prop = classA.createProperty(db, "name", PropertyType.STRING);
    prop.setDefaultValue(db, "default name");
    classA.createProperty(db, "value", PropertyType.STRING);
    classA.createIndex(db, "multi", SchemaClass.INDEX_TYPE.NOTUNIQUE, "value",
        "name");
    Index index = db.getIndex("multi");

    {
      EntityImpl doc = ((EntityImpl) db.newEntity(classA));
      assertEquals("default name", doc.field("name"));
      doc.field("value", "1");

      db.begin();
      db.save(doc);
      db.commit();

      try (Stream<RID> stream = index.getInternal().getRids(db, new CompositeKey("1"))) {
        assertEquals(1, stream.count());
      }
    }
    {
      EntityImpl doc = ((EntityImpl) db.newEntity(classA));
      assertEquals("default name", doc.field("name"));
      doc.field("value", "2");

      db.begin();
      db.save(doc);
      db.commit();

      try (Stream<RID> stream = index.getInternal().getRids(db, new CompositeKey("2"))) {
        assertEquals(1, stream.count());
      }
    }
    try (Stream<RID> stream = index.getInternal().getRids(db, new CompositeKey("3"))) {
      assertEquals(0, stream.count());
    }
  }
}
